from typing import Union

from pyspark.sql.types import ArrayType
from pyspark.sql.types import DataType
from pyspark.sql.types import StringType
from pyspark.sql.types import StructField
from pyspark.sql.types import StructType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class CodeableConceptSchema:
    """
    A concept that may be defined by a formal reference to a terminology or
    ontology or may be provided by text.
    """
    @staticmethod
    def get_schema(recursion_depth: int = 0) -> Union[StructType, DataType]:
        """
        A concept that may be defined by a formal reference to a terminology or
        ontology or may be provided by text.


        id: Unique id for the element within a resource (for internal references). This
            may be any string value that does not contain spaces.

        extension: May be used to represent additional information that is not part of the basic
            definition of the element. To make the use of extensions safe and manageable,
            there is a strict set of governance  applied to the definition and use of
            extensions. Though any implementer can define an extension, there is a set of
            requirements that SHALL be met as part of the definition of the extension.

        coding: A reference to a code defined by a terminology system.

        text: A human language representation of the concept as seen/selected/uttered by the
            user who entered the data and/or which represents the intended meaning of the
            user.

        """
        from spark_fhir_schemas.r4.complex_types.extension import ExtensionSchema
        from spark_fhir_schemas.r4.complex_types.coding import CodingSchema
        if recursion_depth > 3:
            return StructType([])
        schema = StructType(
            [
                # Unique id for the element within a resource (for internal references). This
                # may be any string value that does not contain spaces.
                StructField("id", StringType(), True),
                # May be used to represent additional information that is not part of the basic
                # definition of the element. To make the use of extensions safe and manageable,
                # there is a strict set of governance  applied to the definition and use of
                # extensions. Though any implementer can define an extension, there is a set of
                # requirements that SHALL be met as part of the definition of the extension.
                StructField(
                    "extension",
                    ArrayType(ExtensionSchema.get_schema(recursion_depth + 1)),
                    True
                ),
                # A reference to a code defined by a terminology system.
                StructField(
                    "coding",
                    ArrayType(CodingSchema.get_schema(recursion_depth + 1)),
                    True
                ),
                # A human language representation of the concept as seen/selected/uttered by the
                # user who entered the data and/or which represents the intended meaning of the
                # user.
                StructField("text", StringType(), True),
            ]
        )
        return schema
