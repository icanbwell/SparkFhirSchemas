from typing import Union, List, Optional

from pyspark.sql.types import StructType, StructField, StringType, ArrayType, DataType


# This file is auto-generated by generate_schema so do not edit it manually
# noinspection PyPep8Naming
class Ingredient_StrengthSchema:
    """
    An ingredient of a manufactured item or pharmaceutical product.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
        extension_fields: Optional[List[str]] = None,
        extension_depth: int = 0,
        max_extension_depth: Optional[int] = 2,
        include_modifierExtension: Optional[bool] = False,
        use_date_for: Optional[List[str]] = None,
        parent_path: Optional[str] = "",
    ) -> Union[StructType, DataType]:
        """
        An ingredient of a manufactured item or pharmaceutical product.


        id: Unique id for the element within a resource (for internal references). This
            may be any string value that does not contain spaces.

        extension: May be used to represent additional information that is not part of the basic
            definition of the element. To make the use of extensions safe and manageable,
            there is a strict set of governance  applied to the definition and use of
            extensions. Though any implementer can define an extension, there is a set of
            requirements that SHALL be met as part of the definition of the extension.

        modifierExtension: May be used to represent additional information that is not part of the basic
            definition of the element and that modifies the understanding of the element
            in which it is contained and/or the understanding of the containing element's
            descendants. Usually modifier elements provide negation or qualification. To
            make the use of extensions safe and manageable, there is a strict set of
            governance applied to the definition and use of extensions. Though any
            implementer can define an extension, there is a set of requirements that SHALL
            be met as part of the definition of the extension. Applications processing a
            resource are required to check for modifier extensions.

            Modifier extensions SHALL NOT change the meaning of any elements on Resource
            or DomainResource (including cannot change the meaning of modifierExtension
            itself).

        presentationRatio: The quantity of substance in the unit of presentation, or in the volume (or
            mass) of the single pharmaceutical product or manufactured item. Unit of
            presentation refers to the quantity that the item occurs in e.g. a strength
            per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not
            generally normalized as a unitary unit, which would be 'per mg').

        presentationRatioRange: The quantity of substance in the unit of presentation, or in the volume (or
            mass) of the single pharmaceutical product or manufactured item. Unit of
            presentation refers to the quantity that the item occurs in e.g. a strength
            per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not
            generally normalized as a unitary unit, which would be 'per mg').

        textPresentation: A textual represention of either the whole of the presentation strength or a
            part of it - with the rest being in Strength.presentation as a ratio.

        concentrationRatio: The strength per unitary volume (or mass).

        concentrationRatioRange: The strength per unitary volume (or mass).

        textConcentration: A textual represention of either the whole of the concentration strength or a
            part of it - with the rest being in Strength.concentration as a ratio.

        measurementPoint: For when strength is measured at a particular point or distance. There are
            products where strength is measured at a particular point. For example, the
            strength of the ingredient in some inhalers is measured at a particular
            position relative to the point of aerosolization.

        country: The country or countries for which the strength range applies.

        referenceStrength: Strength expressed in terms of a reference substance. For when the ingredient
            strength is additionally expressed as equivalent to the strength of some other
            closely related substance (e.g. salt vs. base). Reference strength represents
            the strength (quantitative composition) of the active moiety of the active
            substance. There are situations when the active substance and active moiety
            are different, therefore both a strength and a reference strength are needed.

        """
        if extension_fields is None:
            extension_fields = [
                "valueBoolean",
                "valueCode",
                "valueDate",
                "valueDateTime",
                "valueDecimal",
                "valueId",
                "valueInteger",
                "valuePositiveInt",
                "valueString",
                "valueTime",
                "valueUnsignedInt",
                "valueUri",
                "valueUrl",
                "valueReference",
                "valueCodeableConcept",
                "valueAddress",
            ]
        from spark_fhir_schemas.r4b.complex_types.extension import ExtensionSchema
        from spark_fhir_schemas.r4b.complex_types.ratio import RatioSchema
        from spark_fhir_schemas.r4b.complex_types.ratiorange import RatioRangeSchema
        from spark_fhir_schemas.r4b.complex_types.codeableconcept import (
            CodeableConceptSchema,
        )
        from spark_fhir_schemas.r4b.complex_types.ingredient_referencestrength import (
            Ingredient_ReferenceStrengthSchema,
        )

        if (
            max_recursion_limit
            and nesting_list.count("Ingredient_Strength") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + ["Ingredient_Strength"]
        my_parent_path = (
            parent_path + ".ingredient_strength"
            if parent_path
            else "ingredient_strength"
        )
        schema = StructType(
            [
                # Unique id for the element within a resource (for internal references). This
                # may be any string value that does not contain spaces.
                StructField("id", StringType(), True),
                # May be used to represent additional information that is not part of the basic
                # definition of the element. To make the use of extensions safe and manageable,
                # there is a strict set of governance  applied to the definition and use of
                # extensions. Though any implementer can define an extension, there is a set of
                # requirements that SHALL be met as part of the definition of the extension.
                StructField(
                    "extension",
                    ArrayType(
                        ExtensionSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                            extension_fields=extension_fields,
                            extension_depth=extension_depth,
                            max_extension_depth=max_extension_depth,
                            include_modifierExtension=include_modifierExtension,
                            use_date_for=use_date_for,
                            parent_path=my_parent_path,
                        )
                    ),
                    True,
                ),
                # May be used to represent additional information that is not part of the basic
                # definition of the element and that modifies the understanding of the element
                # in which it is contained and/or the understanding of the containing element's
                # descendants. Usually modifier elements provide negation or qualification. To
                # make the use of extensions safe and manageable, there is a strict set of
                # governance applied to the definition and use of extensions. Though any
                # implementer can define an extension, there is a set of requirements that SHALL
                # be met as part of the definition of the extension. Applications processing a
                # resource are required to check for modifier extensions.
                #
                # Modifier extensions SHALL NOT change the meaning of any elements on Resource
                # or DomainResource (including cannot change the meaning of modifierExtension
                # itself).
                StructField(
                    "modifierExtension",
                    ArrayType(
                        ExtensionSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                            extension_fields=extension_fields,
                            extension_depth=extension_depth,
                            max_extension_depth=max_extension_depth,
                            include_modifierExtension=include_modifierExtension,
                            use_date_for=use_date_for,
                            parent_path=my_parent_path,
                        )
                    ),
                    True,
                ),
                # The quantity of substance in the unit of presentation, or in the volume (or
                # mass) of the single pharmaceutical product or manufactured item. Unit of
                # presentation refers to the quantity that the item occurs in e.g. a strength
                # per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not
                # generally normalized as a unitary unit, which would be 'per mg').
                StructField(
                    "presentationRatio",
                    RatioSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                        extension_fields=extension_fields,
                        extension_depth=extension_depth + 1,
                        max_extension_depth=max_extension_depth,
                        include_modifierExtension=include_modifierExtension,
                        use_date_for=use_date_for,
                        parent_path=my_parent_path,
                    ),
                    True,
                ),
                # The quantity of substance in the unit of presentation, or in the volume (or
                # mass) of the single pharmaceutical product or manufactured item. Unit of
                # presentation refers to the quantity that the item occurs in e.g. a strength
                # per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not
                # generally normalized as a unitary unit, which would be 'per mg').
                StructField(
                    "presentationRatioRange",
                    RatioRangeSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                        extension_fields=extension_fields,
                        extension_depth=extension_depth + 1,
                        max_extension_depth=max_extension_depth,
                        include_modifierExtension=include_modifierExtension,
                        use_date_for=use_date_for,
                        parent_path=my_parent_path,
                    ),
                    True,
                ),
                # A textual represention of either the whole of the presentation strength or a
                # part of it - with the rest being in Strength.presentation as a ratio.
                StructField("textPresentation", StringType(), True),
                # The strength per unitary volume (or mass).
                StructField(
                    "concentrationRatio",
                    RatioSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                        extension_fields=extension_fields,
                        extension_depth=extension_depth + 1,
                        max_extension_depth=max_extension_depth,
                        include_modifierExtension=include_modifierExtension,
                        use_date_for=use_date_for,
                        parent_path=my_parent_path,
                    ),
                    True,
                ),
                # The strength per unitary volume (or mass).
                StructField(
                    "concentrationRatioRange",
                    RatioRangeSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                        extension_fields=extension_fields,
                        extension_depth=extension_depth + 1,
                        max_extension_depth=max_extension_depth,
                        include_modifierExtension=include_modifierExtension,
                        use_date_for=use_date_for,
                        parent_path=my_parent_path,
                    ),
                    True,
                ),
                # A textual represention of either the whole of the concentration strength or a
                # part of it - with the rest being in Strength.concentration as a ratio.
                StructField("textConcentration", StringType(), True),
                # For when strength is measured at a particular point or distance. There are
                # products where strength is measured at a particular point. For example, the
                # strength of the ingredient in some inhalers is measured at a particular
                # position relative to the point of aerosolization.
                StructField("measurementPoint", StringType(), True),
                # The country or countries for which the strength range applies.
                StructField(
                    "country",
                    ArrayType(
                        CodeableConceptSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                            extension_fields=extension_fields,
                            extension_depth=extension_depth,
                            max_extension_depth=max_extension_depth,
                            include_modifierExtension=include_modifierExtension,
                            use_date_for=use_date_for,
                            parent_path=my_parent_path,
                        )
                    ),
                    True,
                ),
                # Strength expressed in terms of a reference substance. For when the ingredient
                # strength is additionally expressed as equivalent to the strength of some other
                # closely related substance (e.g. salt vs. base). Reference strength represents
                # the strength (quantitative composition) of the active moiety of the active
                # substance. There are situations when the active substance and active moiety
                # are different, therefore both a strength and a reference strength are needed.
                StructField(
                    "referenceStrength",
                    ArrayType(
                        Ingredient_ReferenceStrengthSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                            extension_fields=extension_fields,
                            extension_depth=extension_depth,
                            max_extension_depth=max_extension_depth,
                            include_modifierExtension=include_modifierExtension,
                            use_date_for=use_date_for,
                            parent_path=my_parent_path,
                        )
                    ),
                    True,
                ),
            ]
        )
        if not include_extension:
            schema.fields = [
                (
                    c
                    if c.name != "extension"
                    else StructField("extension", StringType(), True)
                )
                for c in schema.fields
            ]

        if not include_modifierExtension:
            schema.fields = [
                (
                    c
                    if c.name != "modifierExtension"
                    else StructField("modifierExtension", StringType(), True)
                )
                for c in schema.fields
            ]

        return schema
