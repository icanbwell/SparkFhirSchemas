from typing import Union, List, Optional

from pyspark.sql.types import StructType, StructField, StringType, ArrayType, DataType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class ElementDefinition_TypeSchema:
    """
    Captures constraints on each element within the resource, profile, or
    extension.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
        extension_fields: Optional[List[str]] = [
            "valueBoolean",
            "valueCode",
            "valueDate",
            "valueDateTime",
            "valueDecimal",
            "valueId",
            "valueInteger",
            "valuePositiveInt",
            "valueString",
            "valueTime",
            "valueUnsignedInt",
            "valueUri",
            "valueQuantity",
        ],
        extension_depth: int = 0,
        max_extension_depth: Optional[int] = 2,
    ) -> Union[StructType, DataType]:
        """
        Captures constraints on each element within the resource, profile, or
        extension.


        id: unique id for the element within a resource (for internal references). This
            may be any string value that does not contain spaces.

        extension: May be used to represent additional information that is not part of the basic
            definition of the element. In order to make the use of extensions safe and
            manageable, there is a strict set of governance  applied to the definition and
            use of extensions. Though any implementer is allowed to define an extension,
            there is a set of requirements that SHALL be met as part of the definition of
            the extension.

        code: URL of Data type or Resource that is a(or the) type used for this element.
            References are URLs that are relative to
            http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to
            http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed
            in logical models.

        profile: Identifies a profile structure or implementation Guide that SHALL hold for the
            datatype this element refers to. Can be a local reference - to a contained
            StructureDefinition, or a reference to another StructureDefinition or
            Implementation Guide by a canonical URL. When an implementation guide is
            specified, the resource SHALL conform to at least one profile defined in the
            implementation guide.

        targetProfile: Identifies a profile structure or implementation Guide that SHALL hold for the
            target of the reference this element refers to. Can be a local reference - to
            a contained StructureDefinition, or a reference to another StructureDefinition
            or Implementation Guide by a canonical URL. When an implementation guide is
            specified, the resource SHALL conform to at least one profile defined in the
            implementation guide.

        aggregation: If the type is a reference to another resource, how the resource is or can be
            aggregated - is it a contained resource, or a reference, and if the context is
            a bundle, is it included in the bundle.

        versioning: Whether this reference needs to be version specific or version independent, or
            whether either can be used.

        """
        from spark_fhir_schemas.stu3.complex_types.extension import ExtensionSchema

        if (
            max_recursion_limit
            and nesting_list.count("ElementDefinition_Type") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + ["ElementDefinition_Type"]
        schema = StructType(
            [
                # unique id for the element within a resource (for internal references). This
                # may be any string value that does not contain spaces.
                StructField("id", StringType(), True),
                # May be used to represent additional information that is not part of the basic
                # definition of the element. In order to make the use of extensions safe and
                # manageable, there is a strict set of governance  applied to the definition and
                # use of extensions. Though any implementer is allowed to define an extension,
                # there is a set of requirements that SHALL be met as part of the definition of
                # the extension.
                StructField(
                    "extension",
                    ArrayType(
                        ExtensionSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                            extension_fields=extension_fields,
                            extension_depth=extension_depth,
                            max_extension_depth=max_extension_depth,
                        )
                    ),
                    True,
                ),
                # URL of Data type or Resource that is a(or the) type used for this element.
                # References are URLs that are relative to
                # http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to
                # http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed
                # in logical models.
                StructField("code", StringType(), True),
                # Identifies a profile structure or implementation Guide that SHALL hold for the
                # datatype this element refers to. Can be a local reference - to a contained
                # StructureDefinition, or a reference to another StructureDefinition or
                # Implementation Guide by a canonical URL. When an implementation guide is
                # specified, the resource SHALL conform to at least one profile defined in the
                # implementation guide.
                StructField("profile", StringType(), True),
                # Identifies a profile structure or implementation Guide that SHALL hold for the
                # target of the reference this element refers to. Can be a local reference - to
                # a contained StructureDefinition, or a reference to another StructureDefinition
                # or Implementation Guide by a canonical URL. When an implementation guide is
                # specified, the resource SHALL conform to at least one profile defined in the
                # implementation guide.
                StructField("targetProfile", StringType(), True),
                # If the type is a reference to another resource, how the resource is or can be
                # aggregated - is it a contained resource, or a reference, and if the context is
                # a bundle, is it included in the bundle.
                StructField("aggregation", ArrayType(StringType()), True),
                # Whether this reference needs to be version specific or version independent, or
                # whether either can be used.
                StructField("versioning", StringType(), True),
            ]
        )
        if not include_extension:
            schema.fields = [
                c
                if c.name != "extension"
                else StructField("extension", StringType(), True)
                for c in schema.fields
            ]

        return schema
