from typing import List
from typing import Optional
from typing import Union

from pyspark.sql.types import ArrayType
from pyspark.sql.types import DataType
from pyspark.sql.types import StringType
from pyspark.sql.types import StructField
from pyspark.sql.types import StructType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class QuestionnaireResponse_ItemSchema:
    """
    A structured set of questions and their answers. The questions are ordered and
    grouped into coherent subsets, corresponding to the structure of the grouping
    of the questionnaire being responded to.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
    ) -> Union[StructType, DataType]:
        """
        A structured set of questions and their answers. The questions are ordered and
        grouped into coherent subsets, corresponding to the structure of the grouping
        of the questionnaire being responded to.


        linkId: The item from the Questionnaire that corresponds to this item in the
            QuestionnaireResponse resource.

        definition: A reference to an [[[ElementDefinition]]] that provides the details for the
            item.

        text: Text that is displayed above the contents of the group or as the text of the
            question being answered.

        subject: More specific subject this section's answers are about, details the subject
            given in QuestionnaireResponse.

        answer: The respondent's answer(s) to the question.

        item: Questions or sub-groups nested beneath a question or group.

        """
        from spark_fhir_schemas.stu3.complex_types.reference import ReferenceSchema
        from spark_fhir_schemas.stu3.complex_types.questionnaireresponse_answer import (
            QuestionnaireResponse_AnswerSchema,
        )

        if (
            max_recursion_limit
            and nesting_list.count("QuestionnaireResponse_Item") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + ["QuestionnaireResponse_Item"]
        schema = StructType(
            [
                # The item from the Questionnaire that corresponds to this item in the
                # QuestionnaireResponse resource.
                StructField("linkId", StringType(), True),
                # A reference to an [[[ElementDefinition]]] that provides the details for the
                # item.
                StructField("definition", StringType(), True),
                # Text that is displayed above the contents of the group or as the text of the
                # question being answered.
                StructField("text", StringType(), True),
                # More specific subject this section's answers are about, details the subject
                # given in QuestionnaireResponse.
                StructField(
                    "subject",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The respondent's answer(s) to the question.
                StructField(
                    "answer",
                    ArrayType(
                        QuestionnaireResponse_AnswerSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # Questions or sub-groups nested beneath a question or group.
                StructField(
                    "item",
                    ArrayType(
                        QuestionnaireResponse_ItemSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
            ]
        )
        if not include_extension:
            schema.fields = [
                c
                if c.name != "extension"
                else StructField("extension", StringType(), True)
                for c in schema.fields
            ]
        return schema
