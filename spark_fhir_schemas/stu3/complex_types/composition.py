from typing import List
from typing import Optional
from typing import Union

from pyspark.sql.types import ArrayType
from pyspark.sql.types import DataType
from pyspark.sql.types import StringType
from pyspark.sql.types import StructField
from pyspark.sql.types import StructType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class CompositionSchema:
    """
    A set of healthcare-related information that is assembled together into a
    single logical document that provides a single coherent statement of meaning,
    establishes its own context and that has clinical attestation with regard to
    who is making the statement. While a Composition defines the structure, it
    does not actually contain the content: rather the full content of a document
    is contained in a Bundle, of which the Composition is the first resource
    contained.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
    ) -> Union[StructType, DataType]:
        """
        A set of healthcare-related information that is assembled together into a
        single logical document that provides a single coherent statement of meaning,
        establishes its own context and that has clinical attestation with regard to
        who is making the statement. While a Composition defines the structure, it
        does not actually contain the content: rather the full content of a document
        is contained in a Bundle, of which the Composition is the first resource
        contained.


        resourceType: This is a Composition resource

        identifier: Logical identifier for the composition, assigned when created. This identifier
            stays constant as the composition is changed over time.

        status: The workflow/clinical status of this composition. The status is a marker for
            the clinical standing of the document.

        type: Specifies the particular kind of composition (e.g. History and Physical,
            Discharge Summary, Progress Note). This usually equates to the purpose of
            making the composition.

        class: A categorization for the type of the composition - helps for indexing and
            searching. This may be implied by or derived from the code specified in the
            Composition Type.

        subject: Who or what the composition is about. The composition can be about a person,
            (patient or healthcare practitioner), a device (e.g. a machine) or even a
            group of subjects (such as a document about a herd of livestock, or a set of
            patients that share a common exposure).

        encounter: Describes the clinical encounter or type of care this documentation is
            associated with.

        date: The composition editing time, when the composition was last logically changed
            by the author.

        author: Identifies who is responsible for the information in the composition, not
            necessarily who typed it in.

        title: Official human-readable label for the composition.

        confidentiality: The code specifying the level of confidentiality of the Composition.

        attester: A participant who has attested to the accuracy of the composition/document.

        custodian: Identifies the organization or group who is responsible for ongoing
            maintenance of and access to the composition/document information.

        relatesTo: Relationships that this composition has with other compositions or documents
            that already exist.

        event: The clinical service, such as a colonoscopy or an appendectomy, being
            documented.

        section: The root of the sections that make up the composition.

        """
        from spark_fhir_schemas.stu3.complex_types.identifier import IdentifierSchema
        from spark_fhir_schemas.stu3.complex_types.codeableconcept import (
            CodeableConceptSchema,
        )
        from spark_fhir_schemas.stu3.complex_types.reference import ReferenceSchema
        from spark_fhir_schemas.stu3.complex_types.composition_attester import (
            Composition_AttesterSchema,
        )
        from spark_fhir_schemas.stu3.complex_types.composition_relatesto import (
            Composition_RelatesToSchema,
        )
        from spark_fhir_schemas.stu3.complex_types.composition_event import (
            Composition_EventSchema,
        )
        from spark_fhir_schemas.stu3.complex_types.composition_section import (
            Composition_SectionSchema,
        )

        if (
            max_recursion_limit
            and nesting_list.count("Composition") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + ["Composition"]
        schema = StructType(
            [
                # This is a Composition resource
                StructField("resourceType", StringType(), True),
                # Logical identifier for the composition, assigned when created. This identifier
                # stays constant as the composition is changed over time.
                StructField(
                    "identifier",
                    IdentifierSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The workflow/clinical status of this composition. The status is a marker for
                # the clinical standing of the document.
                StructField("status", StringType(), True),
                # Specifies the particular kind of composition (e.g. History and Physical,
                # Discharge Summary, Progress Note). This usually equates to the purpose of
                # making the composition.
                StructField(
                    "type",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # A categorization for the type of the composition - helps for indexing and
                # searching. This may be implied by or derived from the code specified in the
                # Composition Type.
                StructField(
                    "class",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Who or what the composition is about. The composition can be about a person,
                # (patient or healthcare practitioner), a device (e.g. a machine) or even a
                # group of subjects (such as a document about a herd of livestock, or a set of
                # patients that share a common exposure).
                StructField(
                    "subject",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Describes the clinical encounter or type of care this documentation is
                # associated with.
                StructField(
                    "encounter",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The composition editing time, when the composition was last logically changed
                # by the author.
                StructField("date", StringType(), True),
                # Identifies who is responsible for the information in the composition, not
                # necessarily who typed it in.
                StructField(
                    "author",
                    ArrayType(
                        ReferenceSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # Official human-readable label for the composition.
                StructField("title", StringType(), True),
                # The code specifying the level of confidentiality of the Composition.
                StructField("confidentiality", StringType(), True),
                # A participant who has attested to the accuracy of the composition/document.
                StructField(
                    "attester",
                    ArrayType(
                        Composition_AttesterSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # Identifies the organization or group who is responsible for ongoing
                # maintenance of and access to the composition/document information.
                StructField(
                    "custodian",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Relationships that this composition has with other compositions or documents
                # that already exist.
                StructField(
                    "relatesTo",
                    ArrayType(
                        Composition_RelatesToSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # The clinical service, such as a colonoscopy or an appendectomy, being
                # documented.
                StructField(
                    "event",
                    ArrayType(
                        Composition_EventSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # The root of the sections that make up the composition.
                StructField(
                    "section",
                    ArrayType(
                        Composition_SectionSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
            ]
        )
        if not include_extension:
            schema.fields = [
                c
                if c.name != "extension"
                else StructField("extension", StringType(), True)
                for c in schema.fields
            ]
        return schema
