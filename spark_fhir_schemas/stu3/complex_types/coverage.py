from typing import List
from typing import Optional
from typing import Union

from pyspark.sql.types import ArrayType
from pyspark.sql.types import DataType
from pyspark.sql.types import IntegerType
from pyspark.sql.types import StringType
from pyspark.sql.types import StructField
from pyspark.sql.types import StructType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class CoverageSchema:
    """
    Financial instrument which may be used to reimburse or pay for health care
    products and services.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
    ) -> Union[StructType, DataType]:
        """
        Financial instrument which may be used to reimburse or pay for health care
        products and services.


        resourceType: This is a Coverage resource

        identifier: The main (and possibly only) identifier for the coverage - often referred to
            as a Member Id, Certificate number, Personal Health Number or Case ID. May be
            constructed as the concatination of the Coverage.SubscriberID and the
            Coverage.dependant.

        status: The status of the resource instance.

        type: The type of coverage: social program, medical plan, accident coverage (workers
            compensation, auto), group health or payment by an individual or organization.

        policyHolder: The party who 'owns' the insurance policy,  may be an individual, corporation
            or the subscriber's employer.

        subscriber: The party who has signed-up for or 'owns' the contractual relationship to the
            policy or to whom the benefit of the policy for services rendered to them or
            their family is due.

        subscriberId: The insurer assigned ID for the Subscriber.

        beneficiary: The party who benefits from the insurance coverage., the patient when services
            are provided.

        relationship: The relationship of beneficiary (patient) to the subscriber.

        period: Time period during which the coverage is in force. A missing start date
            indicates the start date isn't known, a missing end date means the coverage is
            continuing to be in force.

        payor: The program or plan underwriter or payor including both insurance and non-
            insurance agreements, such as patient-pay agreements. May provide multiple
            identifiers such as insurance company identifier or business identifier (BIN
            number).

        grouping: A suite of underwrite specific classifiers, for example may be used to
            identify a class of coverage or employer group, Policy, Plan.

        dependent: A unique identifier for a dependent under the coverage.

        sequence: An optional counter for a particular instance of the identified coverage which
            increments upon each renewal.

        order: The order of applicability of this coverage relative to other coverages which
            are currently inforce. Note, there may be gaps in the numbering and this does
            not imply primary, secondard etc. as the specific positioning of coverages
            depends upon the episode of care.

        network: The insurer-specific identifier for the insurer-defined network of providers
            to which the beneficiary may seek treatment which will be covered at the 'in-
            network' rate, otherwise 'out of network' terms and conditions apply.

        contract: The policy(s) which constitute this insurance coverage.

        """
        from spark_fhir_schemas.stu3.complex_types.identifier import IdentifierSchema
        from spark_fhir_schemas.stu3.complex_types.codeableconcept import (
            CodeableConceptSchema,
        )
        from spark_fhir_schemas.stu3.complex_types.reference import ReferenceSchema
        from spark_fhir_schemas.stu3.complex_types.period import PeriodSchema
        from spark_fhir_schemas.stu3.complex_types.coverage_grouping import (
            Coverage_GroupingSchema,
        )

        if (
            max_recursion_limit
            and nesting_list.count("Coverage") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + ["Coverage"]
        schema = StructType(
            [
                # This is a Coverage resource
                StructField("resourceType", StringType(), True),
                # The main (and possibly only) identifier for the coverage - often referred to
                # as a Member Id, Certificate number, Personal Health Number or Case ID. May be
                # constructed as the concatination of the Coverage.SubscriberID and the
                # Coverage.dependant.
                StructField(
                    "identifier",
                    ArrayType(
                        IdentifierSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # The status of the resource instance.
                StructField("status", StringType(), True),
                # The type of coverage: social program, medical plan, accident coverage (workers
                # compensation, auto), group health or payment by an individual or organization.
                StructField(
                    "type",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The party who 'owns' the insurance policy,  may be an individual, corporation
                # or the subscriber's employer.
                StructField(
                    "policyHolder",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The party who has signed-up for or 'owns' the contractual relationship to the
                # policy or to whom the benefit of the policy for services rendered to them or
                # their family is due.
                StructField(
                    "subscriber",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The insurer assigned ID for the Subscriber.
                StructField("subscriberId", StringType(), True),
                # The party who benefits from the insurance coverage., the patient when services
                # are provided.
                StructField(
                    "beneficiary",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The relationship of beneficiary (patient) to the subscriber.
                StructField(
                    "relationship",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Time period during which the coverage is in force. A missing start date
                # indicates the start date isn't known, a missing end date means the coverage is
                # continuing to be in force.
                StructField(
                    "period",
                    PeriodSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The program or plan underwriter or payor including both insurance and non-
                # insurance agreements, such as patient-pay agreements. May provide multiple
                # identifiers such as insurance company identifier or business identifier (BIN
                # number).
                StructField(
                    "payor",
                    ArrayType(
                        ReferenceSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # A suite of underwrite specific classifiers, for example may be used to
                # identify a class of coverage or employer group, Policy, Plan.
                StructField(
                    "grouping",
                    Coverage_GroupingSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # A unique identifier for a dependent under the coverage.
                StructField("dependent", StringType(), True),
                # An optional counter for a particular instance of the identified coverage which
                # increments upon each renewal.
                StructField("sequence", StringType(), True),
                # The order of applicability of this coverage relative to other coverages which
                # are currently inforce. Note, there may be gaps in the numbering and this does
                # not imply primary, secondard etc. as the specific positioning of coverages
                # depends upon the episode of care.
                StructField("order", IntegerType(), True),
                # The insurer-specific identifier for the insurer-defined network of providers
                # to which the beneficiary may seek treatment which will be covered at the 'in-
                # network' rate, otherwise 'out of network' terms and conditions apply.
                StructField("network", StringType(), True),
                # The policy(s) which constitute this insurance coverage.
                StructField(
                    "contract",
                    ArrayType(
                        ReferenceSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
            ]
        )
        if not include_extension:
            schema.fields = [
                c
                if c.name != "extension"
                else StructField("extension", StringType(), True)
                for c in schema.fields
            ]
        return schema
