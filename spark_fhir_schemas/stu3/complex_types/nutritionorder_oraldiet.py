from typing import List
from typing import Optional
from typing import Union

from pyspark.sql.types import ArrayType
from pyspark.sql.types import DataType
from pyspark.sql.types import StringType
from pyspark.sql.types import StructField
from pyspark.sql.types import StructType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class NutritionOrder_OralDietSchema:
    """
    A request to supply a diet, formula feeding (enteral) or oral nutritional
    supplement to a patient/resident.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
    ) -> Union[StructType, DataType]:
        """
        A request to supply a diet, formula feeding (enteral) or oral nutritional
        supplement to a patient/resident.


        type: The kind of diet or dietary restriction such as fiber restricted diet or
            diabetic diet.

        schedule: The time period and frequency at which the diet should be given.  The diet
            should be given for the combination of all schedules if more than one schedule
            is present.

        nutrient: Class that defines the quantity and type of nutrient modifications (for
            example carbohydrate, fiber or sodium) required for the oral diet.

        texture: Class that describes any texture modifications required for the patient to
            safely consume various types of solid foods.

        fluidConsistencyType: The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of
            liquids or fluids served to the patient.

        instruction: Free text or additional instructions or information pertaining to the oral
            diet.

        """
        from spark_fhir_schemas.stu3.complex_types.codeableconcept import (
            CodeableConceptSchema,
        )
        from spark_fhir_schemas.stu3.complex_types.timing import TimingSchema
        from spark_fhir_schemas.stu3.complex_types.nutritionorder_nutrient import (
            NutritionOrder_NutrientSchema,
        )
        from spark_fhir_schemas.stu3.complex_types.nutritionorder_texture import (
            NutritionOrder_TextureSchema,
        )

        if (
            max_recursion_limit
            and nesting_list.count("NutritionOrder_OralDiet") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + ["NutritionOrder_OralDiet"]
        schema = StructType(
            [
                # The kind of diet or dietary restriction such as fiber restricted diet or
                # diabetic diet.
                StructField(
                    "type",
                    ArrayType(
                        CodeableConceptSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # The time period and frequency at which the diet should be given.  The diet
                # should be given for the combination of all schedules if more than one schedule
                # is present.
                StructField(
                    "schedule",
                    ArrayType(
                        TimingSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # Class that defines the quantity and type of nutrient modifications (for
                # example carbohydrate, fiber or sodium) required for the oral diet.
                StructField(
                    "nutrient",
                    ArrayType(
                        NutritionOrder_NutrientSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # Class that describes any texture modifications required for the patient to
                # safely consume various types of solid foods.
                StructField(
                    "texture",
                    ArrayType(
                        NutritionOrder_TextureSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of
                # liquids or fluids served to the patient.
                StructField(
                    "fluidConsistencyType",
                    ArrayType(
                        CodeableConceptSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # Free text or additional instructions or information pertaining to the oral
                # diet.
                StructField("instruction", StringType(), True),
            ]
        )
        if not include_extension:
            schema.fields = [
                c
                if c.name != "extension"
                else StructField("extension", StringType(), True)
                for c in schema.fields
            ]
        return schema
