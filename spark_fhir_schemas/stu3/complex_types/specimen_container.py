from typing import List
from typing import Optional
from typing import Union

from pyspark.sql.types import ArrayType
from pyspark.sql.types import DataType
from pyspark.sql.types import StringType
from pyspark.sql.types import StructField
from pyspark.sql.types import StructType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class Specimen_ContainerSchema:
    """
    A sample to be used for analysis.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
    ) -> Union[StructType, DataType]:
        """
        A sample to be used for analysis.


        identifier: Id for container. There may be multiple; a manufacturer's bar code, lab
            assigned identifier, etc. The container ID may differ from the specimen id in
            some circumstances.

        description: Textual description of the container.

        type: The type of container associated with the specimen (e.g. slide, aliquot,
            etc.).

        capacity: The capacity (volume or other measure) the container may contain.

        specimenQuantity: The quantity of specimen in the container; may be volume, dimensions, or other
            appropriate measurements, depending on the specimen type.

        additiveCodeableConcept: Introduced substance to preserve, maintain or enhance the specimen. Examples:
            Formalin, Citrate, EDTA.

        additiveReference: Introduced substance to preserve, maintain or enhance the specimen. Examples:
            Formalin, Citrate, EDTA.

        """
        from spark_fhir_schemas.stu3.complex_types.identifier import IdentifierSchema
        from spark_fhir_schemas.stu3.complex_types.codeableconcept import (
            CodeableConceptSchema,
        )
        from spark_fhir_schemas.stu3.complex_types.quantity import QuantitySchema
        from spark_fhir_schemas.stu3.complex_types.reference import ReferenceSchema

        if (
            max_recursion_limit
            and nesting_list.count("Specimen_Container") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + ["Specimen_Container"]
        schema = StructType(
            [
                # Id for container. There may be multiple; a manufacturer's bar code, lab
                # assigned identifier, etc. The container ID may differ from the specimen id in
                # some circumstances.
                StructField(
                    "identifier",
                    ArrayType(
                        IdentifierSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # Textual description of the container.
                StructField("description", StringType(), True),
                # The type of container associated with the specimen (e.g. slide, aliquot,
                # etc.).
                StructField(
                    "type",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The capacity (volume or other measure) the container may contain.
                StructField(
                    "capacity",
                    QuantitySchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The quantity of specimen in the container; may be volume, dimensions, or other
                # appropriate measurements, depending on the specimen type.
                StructField(
                    "specimenQuantity",
                    QuantitySchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Introduced substance to preserve, maintain or enhance the specimen. Examples:
                # Formalin, Citrate, EDTA.
                StructField(
                    "additiveCodeableConcept",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Introduced substance to preserve, maintain or enhance the specimen. Examples:
                # Formalin, Citrate, EDTA.
                StructField(
                    "additiveReference",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
            ]
        )
        if not include_extension:
            schema.fields = [
                c
                if c.name != "extension"
                else StructField("extension", StringType(), True)
                for c in schema.fields
            ]
        return schema
