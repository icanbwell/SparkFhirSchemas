from typing import List
from typing import Optional
from typing import Union

from pyspark.sql.types import ArrayType
from pyspark.sql.types import DataType
from pyspark.sql.types import StringType
from pyspark.sql.types import StructField
from pyspark.sql.types import StructType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class AdverseEventSchema:
    """
    Actual or  potential/avoided event causing unintended physical injury
    resulting from or contributed to by medical care, a research study or other
    healthcare setting factors that requires additional monitoring, treatment, or
    hospitalization, or that results in death.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
    ) -> Union[StructType, DataType]:
        """
        Actual or  potential/avoided event causing unintended physical injury
        resulting from or contributed to by medical care, a research study or other
        healthcare setting factors that requires additional monitoring, treatment, or
        hospitalization, or that results in death.


        resourceType: This is a AdverseEvent resource

        identifier: The identifier(s) of this adverse event that are assigned by business
            processes and/or used to refer to it when a direct URL reference to the
            resource itsefl is not appropriate.

        category: The type of event which is important to characterize what occurred and caused
            harm to the subject, or had the potential to cause harm to the subject.

        type: This element defines the specific type of event that occurred or that was
            prevented from occurring.

        subject: This subject or group impacted by the event.  With a prospective adverse
            event, there will be no subject as the adverse event was prevented.

        date: The date (and perhaps time) when the adverse event occurred.

        reaction: Includes information about the reaction that occurred as a result of exposure
            to a substance (for example, a drug or a chemical).

        location: The information about where the adverse event occurred.

        seriousness: Describes the seriousness or severity of the adverse event.

        outcome: Describes the type of outcome from the adverse event.

        recorder: Information on who recorded the adverse event.  May be the patient or a
            practitioner.

        eventParticipant: Parties that may or should contribute or have contributed information to the
            Act. Such information includes information leading to the decision to perform
            the Act and how to perform the Act (e.g. consultant), information that the Act
            itself seeks to reveal (e.g. informant of clinical history), or information
            about what Act was performed (e.g. informant witness).

        description: Describes the adverse event in text.

        suspectEntity: Describes the entity that is suspected to have caused the adverse event.

        subjectMedicalHistory: AdverseEvent.subjectMedicalHistory.

        referenceDocument: AdverseEvent.referenceDocument.

        study: AdverseEvent.study.

        """
        from spark_fhir_schemas.stu3.complex_types.identifier import IdentifierSchema
        from spark_fhir_schemas.stu3.complex_types.codeableconcept import (
            CodeableConceptSchema,
        )
        from spark_fhir_schemas.stu3.complex_types.reference import ReferenceSchema
        from spark_fhir_schemas.stu3.complex_types.adverseevent_suspectentity import (
            AdverseEvent_SuspectEntitySchema,
        )

        if (
            max_recursion_limit
            and nesting_list.count("AdverseEvent") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + ["AdverseEvent"]
        schema = StructType(
            [
                # This is a AdverseEvent resource
                StructField("resourceType", StringType(), True),
                # The identifier(s) of this adverse event that are assigned by business
                # processes and/or used to refer to it when a direct URL reference to the
                # resource itsefl is not appropriate.
                StructField(
                    "identifier",
                    IdentifierSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The type of event which is important to characterize what occurred and caused
                # harm to the subject, or had the potential to cause harm to the subject.
                StructField("category", StringType(), True),
                # This element defines the specific type of event that occurred or that was
                # prevented from occurring.
                StructField(
                    "type",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # This subject or group impacted by the event.  With a prospective adverse
                # event, there will be no subject as the adverse event was prevented.
                StructField(
                    "subject",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The date (and perhaps time) when the adverse event occurred.
                StructField("date", StringType(), True),
                # Includes information about the reaction that occurred as a result of exposure
                # to a substance (for example, a drug or a chemical).
                StructField(
                    "reaction",
                    ArrayType(
                        ReferenceSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # The information about where the adverse event occurred.
                StructField(
                    "location",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Describes the seriousness or severity of the adverse event.
                StructField(
                    "seriousness",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Describes the type of outcome from the adverse event.
                StructField(
                    "outcome",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Information on who recorded the adverse event.  May be the patient or a
                # practitioner.
                StructField(
                    "recorder",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Parties that may or should contribute or have contributed information to the
                # Act. Such information includes information leading to the decision to perform
                # the Act and how to perform the Act (e.g. consultant), information that the Act
                # itself seeks to reveal (e.g. informant of clinical history), or information
                # about what Act was performed (e.g. informant witness).
                StructField(
                    "eventParticipant",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Describes the adverse event in text.
                StructField("description", StringType(), True),
                # Describes the entity that is suspected to have caused the adverse event.
                StructField(
                    "suspectEntity",
                    ArrayType(
                        AdverseEvent_SuspectEntitySchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # AdverseEvent.subjectMedicalHistory.
                StructField(
                    "subjectMedicalHistory",
                    ArrayType(
                        ReferenceSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # AdverseEvent.referenceDocument.
                StructField(
                    "referenceDocument",
                    ArrayType(
                        ReferenceSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
                # AdverseEvent.study.
                StructField(
                    "study",
                    ArrayType(
                        ReferenceSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
            ]
        )
        if not include_extension:
            schema.fields = [
                c
                if c.name != "extension"
                else StructField("extension", StringType(), True)
                for c in schema.fields
            ]
        return schema
