from typing import List
from typing import Optional
from typing import Union

from pyspark.sql.types import DataType
from pyspark.sql.types import IntegerType
from pyspark.sql.types import StringType
from pyspark.sql.types import StructField
from pyspark.sql.types import StructType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class ParameterDefinitionSchema:
    """
    The parameters to the module. This collection specifies both the input and
    output parameters. Input parameters are provided by the caller as part of the
    $evaluate operation. Output parameters are included in the GuidanceResponse.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
    ) -> Union[StructType, DataType]:
        """
        The parameters to the module. This collection specifies both the input and
        output parameters. Input parameters are provided by the caller as part of the
        $evaluate operation. Output parameters are included in the GuidanceResponse.


        name: The name of the parameter used to allow access to the value of the parameter
            in evaluation contexts.

        use: Whether the parameter is input or output for the module.

        min: The minimum number of times this parameter SHALL appear in the request or
            response.

        max: The maximum number of times this element is permitted to appear in the request
            or response.

        documentation: A brief discussion of what the parameter is for and how it is used by the
            module.

        type: The type of the parameter.

        profile: If specified, this indicates a profile that the input data must conform to, or
            that the output data will conform to.

        """
        from spark_fhir_schemas.stu3.complex_types.reference import ReferenceSchema

        if (
            max_recursion_limit
            and nesting_list.count("ParameterDefinition") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + ["ParameterDefinition"]
        schema = StructType(
            [
                # The name of the parameter used to allow access to the value of the parameter
                # in evaluation contexts.
                StructField("name", StringType(), True),
                # Whether the parameter is input or output for the module.
                StructField("use", StringType(), True),
                # The minimum number of times this parameter SHALL appear in the request or
                # response.
                StructField("min", IntegerType(), True),
                # The maximum number of times this element is permitted to appear in the request
                # or response.
                StructField("max", StringType(), True),
                # A brief discussion of what the parameter is for and how it is used by the
                # module.
                StructField("documentation", StringType(), True),
                # The type of the parameter.
                StructField("type", StringType(), True),
                # If specified, this indicates a profile that the input data must conform to, or
                # that the output data will conform to.
                StructField(
                    "profile",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
            ]
        )
        if not include_extension:
            schema.fields = [
                c
                if c.name != "extension"
                else StructField("extension", StringType(), True)
                for c in schema.fields
            ]
        return schema
