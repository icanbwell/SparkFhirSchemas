from typing import List
from typing import Optional
from typing import Union

from pyspark.sql.types import ArrayType
from pyspark.sql.types import BooleanType
from pyspark.sql.types import DataType
from pyspark.sql.types import StringType
from pyspark.sql.types import StructField
from pyspark.sql.types import StructType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class ExplanationOfBenefit_BenefitBalanceSchema:
    """
    This resource provides: the claim details; adjudication details from the
    processing of a Claim; and optionally account balance information, for
    informing the subscriber of the benefits provided.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
    ) -> Union[StructType, DataType]:
        """
        This resource provides: the claim details; adjudication details from the
        processing of a Claim; and optionally account balance information, for
        informing the subscriber of the benefits provided.


        category: Dental, Vision, Medical, Pharmacy, Rehab etc.

        subCategory: Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.

        excluded: True if the indicated class of service is excluded from the plan, missing or
            False indicated the service is included in the coverage.

        name: A short name or tag for the benefit, for example MED01, or DENT2.

        description: A richer description of the benefit, for example 'DENT2 covers 100% of basic,
            50% of major but exclused Ortho, Implants and Costmetic services'.

        network: Network designation.

        unit: Unit designation: individual or family.

        term: The term or period of the values such as 'maximum lifetime benefit' or
            'maximum annual vistis'.

        financial: Benefits Used to date.

        """
        from spark_fhir_schemas.stu3.complex_types.codeableconcept import (
            CodeableConceptSchema,
        )
        from spark_fhir_schemas.stu3.complex_types.explanationofbenefit_financial import (
            ExplanationOfBenefit_FinancialSchema,
        )

        if (
            max_recursion_limit
            and nesting_list.count("ExplanationOfBenefit_BenefitBalance")
            >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + [
            "ExplanationOfBenefit_BenefitBalance"
        ]
        schema = StructType(
            [
                # Dental, Vision, Medical, Pharmacy, Rehab etc.
                StructField(
                    "category",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.
                StructField(
                    "subCategory",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # True if the indicated class of service is excluded from the plan, missing or
                # False indicated the service is included in the coverage.
                StructField("excluded", BooleanType(), True),
                # A short name or tag for the benefit, for example MED01, or DENT2.
                StructField("name", StringType(), True),
                # A richer description of the benefit, for example 'DENT2 covers 100% of basic,
                # 50% of major but exclused Ortho, Implants and Costmetic services'.
                StructField("description", StringType(), True),
                # Network designation.
                StructField(
                    "network",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Unit designation: individual or family.
                StructField(
                    "unit",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # The term or period of the values such as 'maximum lifetime benefit' or
                # 'maximum annual vistis'.
                StructField(
                    "term",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Benefits Used to date.
                StructField(
                    "financial",
                    ArrayType(
                        ExplanationOfBenefit_FinancialSchema.get_schema(
                            max_nesting_depth=max_nesting_depth,
                            nesting_depth=nesting_depth + 1,
                            nesting_list=my_nesting_list,
                            max_recursion_limit=max_recursion_limit,
                            include_extension=include_extension,
                        )
                    ),
                    True,
                ),
            ]
        )
        if not include_extension:
            schema.fields = [
                c
                if c.name != "extension"
                else StructField("extension", StringType(), True)
                for c in schema.fields
            ]
        return schema
