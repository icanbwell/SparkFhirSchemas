from typing import List
from typing import Optional
from typing import Union

from pyspark.sql.types import DataType
from pyspark.sql.types import IntegerType
from pyspark.sql.types import StringType
from pyspark.sql.types import StructField
from pyspark.sql.types import StructType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class Contract_ValuedItem1Schema:
    """
    A formal agreement between parties regarding the conduct of business, exchange
    of information or other matters.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
    ) -> Union[StructType, DataType]:
        """
        A formal agreement between parties regarding the conduct of business, exchange
        of information or other matters.


        entityCodeableConcept: Specific type of Contract Provision Valued Item that may be priced.

        entityReference: Specific type of Contract Provision Valued Item that may be priced.

        identifier: Identifies a Contract Provision Valued Item instance.

        effectiveTime: Indicates the time during which this Contract Term ValuedItem information is
            effective.

        quantity: Specifies the units by which the Contract Provision Valued Item is measured or
            counted, and quantifies the countable or measurable Contract Term Valued Item
            instances.

        unitPrice: A Contract Provision Valued Item unit valuation measure.

        factor: A real number that represents a multiplier used in determining the overall
            value of the Contract Provision Valued Item delivered. The concept of a Factor
            allows for a discount or surcharge multiplier to be applied to a monetary
            amount.

        points: An amount that expresses the weighting (based on difficulty, cost and/or
            resource intensiveness) associated with the Contract Provision Valued Item
            delivered. The concept of Points allows for assignment of point values for a
            Contract ProvisionValued Item, such that a monetary amount can be assigned to
            each point.

        net: Expresses the product of the Contract Provision Valued Item unitQuantity and
            the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost
            per Point) * factor Number  * points = net Amount. Quantity, factor and points
            are assumed to be 1 if not supplied.

        """
        from spark_fhir_schemas.stu3.complex_types.codeableconcept import (
            CodeableConceptSchema,
        )
        from spark_fhir_schemas.stu3.complex_types.reference import ReferenceSchema
        from spark_fhir_schemas.stu3.complex_types.identifier import IdentifierSchema
        from spark_fhir_schemas.stu3.complex_types.quantity import QuantitySchema
        from spark_fhir_schemas.stu3.complex_types.money import MoneySchema

        if (
            max_recursion_limit
            and nesting_list.count("Contract_ValuedItem1") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + ["Contract_ValuedItem1"]
        schema = StructType(
            [
                # Specific type of Contract Provision Valued Item that may be priced.
                StructField(
                    "entityCodeableConcept",
                    CodeableConceptSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Specific type of Contract Provision Valued Item that may be priced.
                StructField(
                    "entityReference",
                    ReferenceSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Identifies a Contract Provision Valued Item instance.
                StructField(
                    "identifier",
                    IdentifierSchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # Indicates the time during which this Contract Term ValuedItem information is
                # effective.
                StructField("effectiveTime", StringType(), True),
                # Specifies the units by which the Contract Provision Valued Item is measured or
                # counted, and quantifies the countable or measurable Contract Term Valued Item
                # instances.
                StructField(
                    "quantity",
                    QuantitySchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # A Contract Provision Valued Item unit valuation measure.
                StructField(
                    "unitPrice",
                    MoneySchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
                # A real number that represents a multiplier used in determining the overall
                # value of the Contract Provision Valued Item delivered. The concept of a Factor
                # allows for a discount or surcharge multiplier to be applied to a monetary
                # amount.
                StructField("factor", IntegerType(), True),
                # An amount that expresses the weighting (based on difficulty, cost and/or
                # resource intensiveness) associated with the Contract Provision Valued Item
                # delivered. The concept of Points allows for assignment of point values for a
                # Contract ProvisionValued Item, such that a monetary amount can be assigned to
                # each point.
                StructField("points", IntegerType(), True),
                # Expresses the product of the Contract Provision Valued Item unitQuantity and
                # the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost
                # per Point) * factor Number  * points = net Amount. Quantity, factor and points
                # are assumed to be 1 if not supplied.
                StructField(
                    "net",
                    MoneySchema.get_schema(
                        max_nesting_depth=max_nesting_depth,
                        nesting_depth=nesting_depth + 1,
                        nesting_list=my_nesting_list,
                        max_recursion_limit=max_recursion_limit,
                        include_extension=include_extension,
                    ),
                    True,
                ),
            ]
        )
        if not include_extension:
            schema.fields = [
                c
                if c.name != "extension"
                else StructField("extension", StringType(), True)
                for c in schema.fields
            ]
        return schema
