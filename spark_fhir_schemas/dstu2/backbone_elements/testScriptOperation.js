/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
TestScript.Operation
    TestScript is a resource that specifies a suite of tests against a FHIR server
    implementation to determine compliance against the FHIR specification.
*/
class TestScriptOperation extends Element {
    /**
     * @param {id|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Coding|undefined} [type],
     * @param {code|undefined} [resource],
     * @param {String|undefined} [label],
     * @param {String|undefined} [description],
     * @param {code|undefined} [accept],
     * @param {code|undefined} [contentType],
     * @param {Int|undefined} [destination],
     * @param {Boolean|undefined} [encodeRequestUrl],
     * @param {String|undefined} [params],
     * @param {TestScriptRequestHeader[]|undefined} [requestHeader],
     * @param {id|undefined} [responseId],
     * @param {id|undefined} [sourceId],
     * @param {id|undefined} [targetId],
     * @param {String|undefined} [url],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            type,
            resource,
            label,
            description,
            accept,
            contentType,
            destination,
            encodeRequestUrl,
            params,
            requestHeader,
            responseId,
            sourceId,
            targetId,
            url,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Server interaction or operation type.
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.type = new Coding(valueProvided);
            }
        });

        /**
         * @description The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'resource', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.resource,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.resource = valueProvided;
            }
        });

        /**
         * @description The label would be used for tracking/logging purposes by test engines.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'label', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.label,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.label = valueProvided;
            }
        });

        /**
         * @description The description would be used by test engines for tracking and reporting
    purposes.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The content-type or mime-type to use for RESTful operation in the 'Accept'
    header.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'accept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.accept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.accept = valueProvided;
            }
        });

        /**
         * @description The content-type or mime-type to use for RESTful operation in the 'Content-
    Type' header.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'contentType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contentType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.contentType = valueProvided;
            }
        });

        /**
         * @description Which server to perform the operation on.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'destination', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.destination,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.destination = valueProvided;
            }
        });

        /**
         * @description Whether or not to implicitly send the request url in encoded format. The
    default is true to match the standard RESTful client behavior. Set to false
    when communicating with a server that does not support encoded url paths.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'encodeRequestUrl', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.encodeRequestUrl,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.encodeRequestUrl = valueProvided;
            }
        });

        /**
         * @description Path plus parameters after [type].  Used to set parts of the request URL
    explicitly.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'params', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.params,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.params = valueProvided;
            }
        });

        /**
         * @description Header elements would be used to set HTTP headers.
         * @property {TestScriptRequestHeader[]|undefined}
        */
        Object.defineProperty(this, 'requestHeader', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.requestHeader,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let TestScriptRequestHeader = require('../backbone_elements/testScriptRequestHeader.js');
                this.__data.requestHeader = Array.isArray(valueProvided) ? valueProvided.map(v => new TestScriptRequestHeader(v)) : [new TestScriptRequestHeader(valueProvided)];
            }
        });

        /**
         * @description The fixture id (maybe new) to map to the response.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'responseId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.responseId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.responseId = valueProvided;
            }
        });

        /**
         * @description The id of the fixture used as the body of a PUT or POST request.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.sourceId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.sourceId = valueProvided;
            }
        });

        /**
         * @description Id of fixture used for extracting the [id],  [type], and [vid] for GET
    requests.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'targetId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.targetId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.targetId = valueProvided;
            }
        });

        /**
         * @description Complete request URL.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'url', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.url,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.url = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            type,
            resource,
            label,
            description,
            accept,
            contentType,
            destination,
            encodeRequestUrl,
            params,
            requestHeader,
            responseId,
            sourceId,
            targetId,
            url,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            type: this.type && this.type.toJSON(),
            resource: this.resource,
            label: this.label,
            description: this.description,
            accept: this.accept,
            contentType: this.contentType,
            destination: this.destination,
            encodeRequestUrl: this.encodeRequestUrl,
            params: this.params,
            requestHeader: this.requestHeader && this.requestHeader.map(v => v.toJSON()),
            responseId: this.responseId,
            sourceId: this.sourceId,
            targetId: this.targetId,
            url: this.url,
        });
    }
}

module.exports = TestScriptOperation;
