/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
TestScript.Assert
    TestScript is a resource that specifies a suite of tests against a FHIR server
    implementation to determine compliance against the FHIR specification.
*/
class TestScriptAssert extends Element {
    /**
     * @param {id|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {String|undefined} [label],
     * @param {String|undefined} [description],
     * @param {code|undefined} [direction],
     * @param {String|undefined} [compareToSourceId],
     * @param {String|undefined} [compareToSourcePath],
     * @param {code|undefined} [contentType],
     * @param {String|undefined} [headerField],
     * @param {String|undefined} [minimumId],
     * @param {Boolean|undefined} [navigationLinks],
     * @param {code|undefined} [operator],
     * @param {String|undefined} [path],
     * @param {code|undefined} [resource],
     * @param {code|undefined} [response],
     * @param {String|undefined} [responseCode],
     * @param {id|undefined} [sourceId],
     * @param {id|undefined} [validateProfileId],
     * @param {String|undefined} [value],
     * @param {Boolean|undefined} [warningOnly],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            label,
            description,
            direction,
            compareToSourceId,
            compareToSourcePath,
            contentType,
            headerField,
            minimumId,
            navigationLinks,
            operator,
            path,
            resource,
            response,
            responseCode,
            sourceId,
            validateProfileId,
            value,
            warningOnly,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The label would be used for tracking/logging purposes by test engines.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'label', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.label,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.label = valueProvided;
            }
        });

        /**
         * @description The description would be used by test engines for tracking and reporting
    purposes.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The direction to use for the assertion.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'direction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.direction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.direction = valueProvided;
            }
        });

        /**
         * @description Id of fixture used to compare the "sourceId/path" evaluations to.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'compareToSourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.compareToSourceId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.compareToSourceId = valueProvided;
            }
        });

        /**
         * @description XPath or JSONPath expression against fixture used to compare the
    "sourceId/path" evaluations to.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'compareToSourcePath', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.compareToSourcePath,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.compareToSourcePath = valueProvided;
            }
        });

        /**
         * @description The content-type or mime-type to use for RESTful operation in the 'Content-
    Type' header.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'contentType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contentType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.contentType = valueProvided;
            }
        });

        /**
         * @description The HTTP header field name e.g. 'Location'.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'headerField', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.headerField,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.headerField = valueProvided;
            }
        });

        /**
         * @description The ID of a fixture.  Asserts that the response contains at a minimumId the
    fixture specified by minimumId.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'minimumId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.minimumId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.minimumId = valueProvided;
            }
        });

        /**
         * @description Whether or not the test execution performs validation on the bundle navigation
    links.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'navigationLinks', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.navigationLinks,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.navigationLinks = valueProvided;
            }
        });

        /**
         * @description The operator type.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'operator', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.operator,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.operator = valueProvided;
            }
        });

        /**
         * @description The XPath or JSONPath expression to be evaluated against the fixture
    representing the response received from server.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'path', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.path,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.path = valueProvided;
            }
        });

        /**
         * @description The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'resource', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.resource,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.resource = valueProvided;
            }
        });

        /**
         * @description okay | created | noContent | notModified | bad | forbidden | notFound |
    methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'response', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.response,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.response = valueProvided;
            }
        });

        /**
         * @description The value of the HTTP response code to be tested.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'responseCode', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.responseCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.responseCode = valueProvided;
            }
        });

        /**
         * @description Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'sourceId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.sourceId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.sourceId = valueProvided;
            }
        });

        /**
         * @description The ID of the Profile to validate against.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'validateProfileId', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.validateProfileId,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.validateProfileId = valueProvided;
            }
        });

        /**
         * @description The value to compare to.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'value', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.value,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.value = valueProvided;
            }
        });

        /**
         * @description Whether or not the test execution will produce a warning only on error for
    this assert.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'warningOnly', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.warningOnly,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.warningOnly = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            label,
            description,
            direction,
            compareToSourceId,
            compareToSourcePath,
            contentType,
            headerField,
            minimumId,
            navigationLinks,
            operator,
            path,
            resource,
            response,
            responseCode,
            sourceId,
            validateProfileId,
            value,
            warningOnly,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            label: this.label,
            description: this.description,
            direction: this.direction,
            compareToSourceId: this.compareToSourceId,
            compareToSourcePath: this.compareToSourcePath,
            contentType: this.contentType,
            headerField: this.headerField,
            minimumId: this.minimumId,
            navigationLinks: this.navigationLinks,
            operator: this.operator,
            path: this.path,
            resource: this.resource,
            response: this.response,
            responseCode: this.responseCode,
            sourceId: this.sourceId,
            validateProfileId: this.validateProfileId,
            value: this.value,
            warningOnly: this.warningOnly,
        });
    }
}

module.exports = TestScriptAssert;
