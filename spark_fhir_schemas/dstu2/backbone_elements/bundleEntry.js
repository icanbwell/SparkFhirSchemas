/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
Bundle.Entry
    A container for a collection of resources.
*/
class BundleEntry extends Element {
    /**
     * @param {id|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {BundleLink[]|undefined} [link],
     * @param {uri|undefined} [fullUrl],
     * @param {ResourceContainer|undefined} [resource],
     * @param {BundleSearch|undefined} [search],
     * @param {BundleRequest|undefined} [request],
     * @param {BundleResponse|undefined} [response],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            link,
            fullUrl,
            resource,
            search,
            request,
            response,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description A series of links that provide context to this entry.
         * @property {BundleLink[]|undefined}
        */
        Object.defineProperty(this, 'link', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.link,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let BundleLink = require('../backbone_elements/bundleLink.js');
                this.__data.link = Array.isArray(valueProvided) ? valueProvided.map(v => new BundleLink(v)) : [new BundleLink(valueProvided)];
            }
        });

        /**
         * @description The Absolute URL for the resource. This must be provided for all resources.
    The fullUrl SHALL not disagree with the id in the resource. The fullUrl is a
    version independent reference to the resource.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'fullUrl', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.fullUrl,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.fullUrl = valueProvided;
            }
        });

        /**
         * @description The Resources for the entry.
         * @property {ResourceContainer|undefined}
        */
        Object.defineProperty(this, 'resource', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.resource,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.resource = new ResourceCreator(valueProvided);
            }
        });

        /**
         * @description Information about the search process that lead to the creation of this entry.
         * @property {BundleSearch|undefined}
        */
        Object.defineProperty(this, 'search', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.search,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let BundleSearch = require('../backbone_elements/bundleSearch.js');
                this.__data.search = new BundleSearch(valueProvided);
            }
        });

        /**
         * @description Additional information about how this entry should be processed as part of a
    transaction.
         * @property {BundleRequest|undefined}
        */
        Object.defineProperty(this, 'request', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.request,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let BundleRequest = require('../backbone_elements/bundleRequest.js');
                this.__data.request = new BundleRequest(valueProvided);
            }
        });

        /**
         * @description Additional information about how this entry should be processed as part of a
    transaction.
         * @property {BundleResponse|undefined}
        */
        Object.defineProperty(this, 'response', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.response,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let BundleResponse = require('../backbone_elements/bundleResponse.js');
                this.__data.response = new BundleResponse(valueProvided);
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            link,
            fullUrl,
            resource,
            search,
            request,
            response,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            link: this.link && this.link.map(v => v.toJSON()),
            fullUrl: this.fullUrl,
            resource: this.resource && this.resource.toJSON(),
            search: this.search && this.search.toJSON(),
            request: this.request && this.request.toJSON(),
            response: this.response && this.response.toJSON(),
        });
    }
}

module.exports = BundleEntry;
