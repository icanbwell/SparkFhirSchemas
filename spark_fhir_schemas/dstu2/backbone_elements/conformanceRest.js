/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
Conformance.Rest
    A conformance statement is a set of capabilities of a FHIR Server that may be
    used as a statement of actual server functionality or a statement of required
    or desired server implementation.
*/
class ConformanceRest extends Element {
    /**
     * @param {id|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {code} mode,
     * @param {String|undefined} [documentation],
     * @param {ConformanceSecurity|undefined} [security],
     * @param {ConformanceResource[]} resource,
     * @param {ConformanceInteraction1[]|undefined} [interaction],
     * @param {code|undefined} [transactionMode],
     * @param {ConformanceSearchParam[]|undefined} [searchParam],
     * @param {ConformanceOperation[]|undefined} [operation],
     * @param {uri[]|undefined} [compartment],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            mode,
            documentation,
            security,
            resource,
            interaction,
            transactionMode,
            searchParam,
            operation,
            compartment,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Identifies whether this portion of the statement is describing ability to
    initiate or receive restful operations.
         * @property {code}
        */
        Object.defineProperty(this, 'mode', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.mode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.mode = valueProvided;
            }
        });

        /**
         * @description Information about the system's restful capabilities that apply across all
    applications, such as security.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'documentation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.documentation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.documentation = valueProvided;
            }
        });

        /**
         * @description Information about security implementation from an interface perspective - what
    a client needs to know.
         * @property {ConformanceSecurity|undefined}
        */
        Object.defineProperty(this, 'security', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.security,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ConformanceSecurity = require('../backbone_elements/conformanceSecurity.js');
                this.__data.security = new ConformanceSecurity(valueProvided);
            }
        });

        /**
         * @description A specification of the restful capabilities of the solution for a specific
    resource type.
         * @property {ConformanceResource[]}
        */
        Object.defineProperty(this, 'resource', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.resource,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ConformanceResource = require('../backbone_elements/conformanceResource.js');
                this.__data.resource = Array.isArray(valueProvided) ? valueProvided.map(v => new ConformanceResource(v)) : [new ConformanceResource(valueProvided)];
            }
        });

        /**
         * @description A specification of restful operations supported by the system.
         * @property {ConformanceInteraction1[]|undefined}
        */
        Object.defineProperty(this, 'interaction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.interaction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ConformanceInteraction1 = require('../backbone_elements/conformanceInteraction1.js');
                this.__data.interaction = Array.isArray(valueProvided) ? valueProvided.map(v => new ConformanceInteraction1(v)) : [new ConformanceInteraction1(valueProvided)];
            }
        });

        /**
         * @description A code that indicates how transactions are supported.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'transactionMode', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.transactionMode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.transactionMode = valueProvided;
            }
        });

        /**
         * @description Search parameters that are supported for searching all resources for
    implementations to support and/or make use of - either references to ones
    defined in the specification, or additional ones defined for/by the
    implementation.
         * @property {ConformanceSearchParam[]|undefined}
        */
        Object.defineProperty(this, 'searchParam', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.searchParam,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ConformanceSearchParam = require('../backbone_elements/conformanceSearchParam.js');
                this.__data.searchParam = Array.isArray(valueProvided) ? valueProvided.map(v => new ConformanceSearchParam(v)) : [new ConformanceSearchParam(valueProvided)];
            }
        });

        /**
         * @description Definition of an operation or a named query and with its parameters and their
    meaning and type.
         * @property {ConformanceOperation[]|undefined}
        */
        Object.defineProperty(this, 'operation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.operation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ConformanceOperation = require('../backbone_elements/conformanceOperation.js');
                this.__data.operation = Array.isArray(valueProvided) ? valueProvided.map(v => new ConformanceOperation(v)) : [new ConformanceOperation(valueProvided)];
            }
        });

        /**
         * @description An absolute URI which is a reference to the definition of a compartment hosted
    by the system.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'compartment', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.compartment,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.compartment = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            mode,
            documentation,
            security,
            resource,
            interaction,
            transactionMode,
            searchParam,
            operation,
            compartment,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            mode: this.mode,
            documentation: this.documentation,
            security: this.security && this.security.toJSON(),
            resource: this.resource && this.resource.map(v => v.toJSON()),
            interaction: this.interaction && this.interaction.map(v => v.toJSON()),
            transactionMode: this.transactionMode,
            searchParam: this.searchParam && this.searchParam.map(v => v.toJSON()),
            operation: this.operation && this.operation.map(v => v.toJSON()),
            compartment: this.compartment,
        });
    }
}

module.exports = ConformanceRest;
