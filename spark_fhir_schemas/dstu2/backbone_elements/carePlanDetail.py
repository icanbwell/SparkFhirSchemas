from typing import Union, List, Optional

from pyspark.sql.types import StructType, StructField, StringType, DataType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class CarePlanDetailSchema:
    """
    Describes the intention of how one or more practitioners intend to deliver
    care for a particular patient, group or community for a period of time,
    possibly limited to care for a specific condition or set of conditions.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
        extension_fields: Optional[List[str]] = [
            "valueBoolean",
            "valueCode",
            "valueDate",
            "valueDateTime",
            "valueDecimal",
            "valueId",
            "valueInteger",
            "valuePositiveInt",
            "valueString",
            "valueTime",
            "valueUnsignedInt",
            "valueUri",
            "valueQuantity",
        ],
        extension_depth: int = 0,
        max_extension_depth: Optional[int] = 2,
    ) -> Union[StructType, DataType]:
        """
        Describes the intention of how one or more practitioners intend to deliver
        care for a particular patient, group or community for a period of time,
        possibly limited to care for a specific condition or set of conditions.


            id: None
            extension: May be used to represent additional information that is not part of the basic
        definition of the element. In order to make the use of extensions safe and
        manageable, there is a strict set of governance  applied to the definition and
        use of extensions. Though any implementer is allowed to define an extension,
        there is a set of requirements that SHALL be met as part of the definition of
        the extension.
            modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element, and that modifies the understanding of the element
        that contains it. Usually modifier elements provide negation or qualification.
        In order to make the use of extensions safe and manageable, there is a strict
        set of governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.
            category: High-level categorization of the type of activity in a care plan.
            code: Detailed description of the type of planned activity; e.g. What lab test, what
        procedure, what kind of encounter.
            reasonCode: Provides the rationale that drove the inclusion of this particular activity as
        part of the plan.
            reasonReference: Provides the health condition(s) that drove the inclusion of this particular
        activity as part of the plan.
            goal: Internal reference that identifies the goals that this activity is intended to
        contribute towards meeting.
            status: Identifies what progress is being made for the specific activity.
            statusReason: Provides reason why the activity isn't yet started, is on hold, was cancelled,
        etc.
            prohibited: If true, indicates that the described activity is one that must NOT be engaged
        in when following the plan.
            scheduledTiming: None
            scheduledPeriod: None
            scheduledString: None
            location: Identifies the facility where the activity will occur; e.g. home, hospital,
        specific clinic, etc.
            performer: Identifies who's expected to be involved in the activity.
            productCodeableConcept: None
            productReference: None
            dailyAmount: Identifies the quantity expected to be consumed in a given day.
            quantity: Identifies the quantity expected to be supplied, administered or consumed by
        the subject.
            description: This provides a textual description of constraints on the intended activity
        occurrence, including relation to other activities.  It may also include
        objectives, pre-conditions and end-conditions.  Finally, it may convey
        specifics about the activity such as body site, method, route, etc.
        """
        if (
            max_recursion_limit
            and nesting_list.count("CarePlanDetail") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # Return at least one field in the struct or Spark throws an error
        # "Datasource does not support writing empty or nested empty schemas"
        return StructType([StructField("id", StringType(), True)])
