from typing import Union, List, Optional

from pyspark.sql.types import StructType, StructField, StringType, DataType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class AllergyIntoleranceReactionSchema:
    """
    Risk of harmful or undesirable, physiological response which is unique to an
    individual and associated with exposure to a substance.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
        extension_fields: Optional[List[str]] = [
            "valueBoolean",
            "valueCode",
            "valueDate",
            "valueDateTime",
            "valueDecimal",
            "valueId",
            "valueInteger",
            "valuePositiveInt",
            "valueString",
            "valueTime",
            "valueUnsignedInt",
            "valueUri",
            "valueQuantity",
        ],
        extension_depth: int = 0,
        max_extension_depth: Optional[int] = 2,
    ) -> Union[StructType, DataType]:
        """
        Risk of harmful or undesirable, physiological response which is unique to an
        individual and associated with exposure to a substance.


            id: None
            extension: May be used to represent additional information that is not part of the basic
        definition of the element. In order to make the use of extensions safe and
        manageable, there is a strict set of governance  applied to the definition and
        use of extensions. Though any implementer is allowed to define an extension,
        there is a set of requirements that SHALL be met as part of the definition of
        the extension.
            modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element, and that modifies the understanding of the element
        that contains it. Usually modifier elements provide negation or qualification.
        In order to make the use of extensions safe and manageable, there is a strict
        set of governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.
            substance: Identification of the specific substance considered to be responsible for the
        Adverse Reaction event. Note: the substance for a specific reaction may be
        different to the substance identified as the cause of the risk, but must be
        consistent with it. For instance, it may be a more specific substance (e.g. a
        brand medication) or a composite substance that includes the identified
        substance. It must be clinically safe to only process the
        AllergyIntolerance.substance and ignore the
        AllergyIntolerance.event.substance.
            certainty: Statement about the degree of clinical certainty that the specific substance
        was the cause of the manifestation in this reaction event.
            manifestation: Clinical symptoms and/or signs that are observed or associated with the
        adverse reaction event.
            description: Text description about the reaction as a whole, including details of the
        manifestation if required.
            onset: Record of the date and/or time of the onset of the Reaction.
            severity: Clinical assessment of the severity of the reaction event as a whole,
        potentially considering multiple different manifestations.
            exposureRoute: Identification of the route by which the subject was exposed to the substance.
            note: Additional text about the adverse reaction event not captured in other fields.
        """
        if (
            max_recursion_limit
            and nesting_list.count("AllergyIntoleranceReaction") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # Return at least one field in the struct or Spark throws an error
        # "Datasource does not support writing empty or nested empty schemas"
        return StructType([StructField("id", StringType(), True)])
