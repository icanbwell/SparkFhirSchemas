/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
ValueSet.Concept
    A value set specifies a set of codes drawn from one or more code systems.
*/
class ValueSetConcept extends Element {
    /**
     * @param {id|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {code} code,
     * @param {Boolean|undefined} [abstract],
     * @param {String|undefined} [display],
     * @param {String|undefined} [definition],
     * @param {ValueSetDesignation[]|undefined} [designation],
     * @param {ValueSetConcept[]|undefined} [concept],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            code,
            abstract,
            display,
            definition,
            designation,
            concept,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description A code - a text symbol - that uniquely identifies the concept within the code
    system.
         * @property {code}
        */
        Object.defineProperty(this, 'code', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.code = valueProvided;
            }
        });

        /**
         * @description If this code is not for use as a real concept.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'abstract', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.abstract,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.abstract = valueProvided;
            }
        });

        /**
         * @description A human readable string that is the recommended default way to present this
    concept to a user.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'display', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.display,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.display = valueProvided;
            }
        });

        /**
         * @description The formal definition of the concept. The value set resource does not make
    formal definitions required, because of the prevalence of legacy systems.
    However, they are highly recommended, as without them there is no formal
    meaning associated with the concept.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'definition', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.definition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.definition = valueProvided;
            }
        });

        /**
         * @description Additional representations for the concept - other languages, aliases,
    specialized purposes, used for particular purposes, etc.
         * @property {ValueSetDesignation[]|undefined}
        */
        Object.defineProperty(this, 'designation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.designation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ValueSetDesignation = require('../backbone_elements/valueSetDesignation.js');
                this.__data.designation = Array.isArray(valueProvided) ? valueProvided.map(v => new ValueSetDesignation(v)) : [new ValueSetDesignation(valueProvided)];
            }
        });

        /**
         * @description Defines children of a concept to produce a hierarchy of concepts. The nature
    of the relationships is variable (is-a/contains/categorizes) and can only be
    determined by examining the definitions of the concepts.
         * @property {ValueSetConcept[]|undefined}
        */
        Object.defineProperty(this, 'concept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.concept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.concept = Array.isArray(valueProvided) ? valueProvided.map(v => new ValueSetConcept(v)) : [new ValueSetConcept(valueProvided)];
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            code,
            abstract,
            display,
            definition,
            designation,
            concept,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            code: this.code,
            abstract: this.abstract,
            display: this.display,
            definition: this.definition,
            designation: this.designation && this.designation.map(v => v.toJSON()),
            concept: this.concept && this.concept.map(v => v.toJSON()),
        });
    }
}

module.exports = ValueSetConcept;
