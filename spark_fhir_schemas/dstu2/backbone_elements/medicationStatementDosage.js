/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
MedicationStatement.Dosage
    A record of a medication that is being consumed by a patient.   A
    MedicationStatement may indicate that the patient may be taking the medication
    now, or has taken the medication in the past or will be taking the medication
    in the future.  The source of this information can be the patient, significant
    other (such as a family member or spouse), or a clinician.  A common scenario
    where this information is captured is during the history taking process during
    a patient visit or stay.   The medication information may come from e.g. the
    patient's memory, from a prescription bottle,  or from a list of medications
    the patient, clinician or other party maintains
    
    The primary difference between a medication statement and a medication
    administration is that the medication administration has complete
    administration information and is based on actual administration information
    from the person who administered the medication.  A medication statement is
    often, if not always, less specific.  There is no required date/time when the
    medication was administered, in fact we only know that a source has reported
    the patient is taking this medication, where details such as time, quantity,
    or rate or even medication product may be incomplete or missing or less
    precise.  As stated earlier, the medication statement information may come
    from the patient's memory, from a prescription bottle or from a list of
    medications the patient, clinician or other party maintains.  Medication
    administration is more formal and is not missing detailed information.
*/
class MedicationStatementDosage extends Element {
    /**
     * @param {id|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {String|undefined} [text],
     * @param {Timing|undefined} [timing],
     * @param {Boolean|undefined} [asNeededBoolean],
     * @param {CodeableConcept|undefined} [asNeededCodeableConcept],
     * @param {CodeableConcept|undefined} [siteCodeableConcept],
     * @param {Reference|undefined} [siteReference],
     * @param {CodeableConcept|undefined} [route],
     * @param {CodeableConcept|undefined} [method],
     * @param {SimpleQuantity|undefined} [quantityQuantity],
     * @param {Range|undefined} [quantityRange],
     * @param {Ratio|undefined} [rateRatio],
     * @param {Range|undefined} [rateRange],
     * @param {Ratio|undefined} [maxDosePerPeriod],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            text,
            timing,
            asNeededBoolean,
            asNeededCodeableConcept,
            siteCodeableConcept,
            siteReference,
            route,
            method,
            quantityQuantity,
            quantityRange,
            rateRatio,
            rateRange,
            maxDosePerPeriod,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Free text dosage information as reported about a patient's medication use.
    When coded dosage information is present, the free text may still be present
    for display to humans.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.text = valueProvided;
            }
        });

        /**
         * @description The timing schedule for giving the medication to the patient.  The Schedule
    data type allows many different expressions, for example.  "Every  8 hours";
    "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec
    2011:";  "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
         * @property {Timing|undefined}
        */
        Object.defineProperty(this, 'timing', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.timing,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Timing = require('../complex_types/timing.js');
                this.__data.timing = new Timing(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'asNeededBoolean', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.asNeededBoolean,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.asNeededBoolean = valueProvided;
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'asNeededCodeableConcept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.asNeededCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.asNeededCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'siteCodeableConcept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.siteCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.siteCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'siteReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.siteReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.siteReference = new Reference(valueProvided);
            }
        });

        /**
         * @description A code specifying the route or physiological path of administration of a
    therapeutic agent into or onto a subject.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'route', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.route,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.route = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A coded value indicating the method by which the medication is intended to be
    or was introduced into or on the body.  This attribute will most often NOT be
    populated.  It is most commonly used for injections.  For example, Slow Push,
    Deep IV.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'method', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.method,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.method = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {SimpleQuantity|undefined}
        */
        Object.defineProperty(this, 'quantityQuantity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.quantityQuantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.quantityQuantity = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'quantityRange', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.quantityRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.quantityRange = new Range(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'rateRatio', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.rateRatio,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.rateRatio = new Ratio(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'rateRange', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.rateRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.rateRange = new Range(valueProvided);
            }
        });

        /**
         * @description The maximum total quantity of a therapeutic substance that may be administered
    to a subject over the period of time.  For example, 1000mg in 24 hours.
         * @property {Ratio|undefined}
        */
        Object.defineProperty(this, 'maxDosePerPeriod', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.maxDosePerPeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Ratio = require('../complex_types/ratio.js');
                this.__data.maxDosePerPeriod = new Ratio(valueProvided);
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            text,
            timing,
            asNeededBoolean,
            asNeededCodeableConcept,
            siteCodeableConcept,
            siteReference,
            route,
            method,
            quantityQuantity,
            quantityRange,
            rateRatio,
            rateRange,
            maxDosePerPeriod,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            text: this.text,
            timing: this.timing && this.timing.toJSON(),
            asNeededBoolean: this.asNeededBoolean,
            asNeededCodeableConcept: this.asNeededCodeableConcept && this.asNeededCodeableConcept.toJSON(),
            siteCodeableConcept: this.siteCodeableConcept && this.siteCodeableConcept.toJSON(),
            siteReference: this.siteReference && this.siteReference.toJSON(),
            route: this.route && this.route.toJSON(),
            method: this.method && this.method.toJSON(),
            quantityQuantity: this.quantityQuantity,
            quantityRange: this.quantityRange && this.quantityRange.toJSON(),
            rateRatio: this.rateRatio && this.rateRatio.toJSON(),
            rateRange: this.rateRange && this.rateRange.toJSON(),
            maxDosePerPeriod: this.maxDosePerPeriod && this.maxDosePerPeriod.toJSON(),
        });
    }
}

module.exports = MedicationStatementDosage;
