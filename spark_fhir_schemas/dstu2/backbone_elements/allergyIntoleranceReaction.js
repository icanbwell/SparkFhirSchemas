/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
AllergyIntolerance.Reaction
    Risk of harmful or undesirable, physiological response which is unique to an
    individual and associated with exposure to a substance.
*/
class AllergyIntoleranceReaction extends Element {
    /**
     * @param {id|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {CodeableConcept|undefined} [substance],
     * @param {code|undefined} [certainty],
     * @param {CodeableConcept[]} manifestation,
     * @param {String|undefined} [description],
     * @param {dateTime|undefined} [onset],
     * @param {code|undefined} [severity],
     * @param {CodeableConcept|undefined} [exposureRoute],
     * @param {Annotation|undefined} [note],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            substance,
            certainty,
            manifestation,
            description,
            onset,
            severity,
            exposureRoute,
            note,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Identification of the specific substance considered to be responsible for the
    Adverse Reaction event. Note: the substance for a specific reaction may be
    different to the substance identified as the cause of the risk, but must be
    consistent with it. For instance, it may be a more specific substance (e.g. a
    brand medication) or a composite substance that includes the identified
    substance. It must be clinically safe to only process the
    AllergyIntolerance.substance and ignore the
    AllergyIntolerance.event.substance.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'substance', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.substance,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.substance = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Statement about the degree of clinical certainty that the specific substance
    was the cause of the manifestation in this reaction event.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'certainty', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.certainty,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.certainty = valueProvided;
            }
        });

        /**
         * @description Clinical symptoms and/or signs that are observed or associated with the
    adverse reaction event.
         * @property {CodeableConcept[]}
        */
        Object.defineProperty(this, 'manifestation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.manifestation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.manifestation = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Text description about the reaction as a whole, including details of the
    manifestation if required.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description Record of the date and/or time of the onset of the Reaction.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'onset', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.onset,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.onset = valueProvided;
            }
        });

        /**
         * @description Clinical assessment of the severity of the reaction event as a whole,
    potentially considering multiple different manifestations.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'severity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.severity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.severity = valueProvided;
            }
        });

        /**
         * @description Identification of the route by which the subject was exposed to the substance.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'exposureRoute', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.exposureRoute,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.exposureRoute = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Additional text about the adverse reaction event not captured in other fields.
         * @property {Annotation|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = new Annotation(valueProvided);
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            substance,
            certainty,
            manifestation,
            description,
            onset,
            severity,
            exposureRoute,
            note,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            substance: this.substance && this.substance.toJSON(),
            certainty: this.certainty,
            manifestation: this.manifestation && this.manifestation.map(v => v.toJSON()),
            description: this.description,
            onset: this.onset,
            severity: this.severity,
            exposureRoute: this.exposureRoute && this.exposureRoute.toJSON(),
            note: this.note && this.note.toJSON(),
        });
    }
}

module.exports = AllergyIntoleranceReaction;
