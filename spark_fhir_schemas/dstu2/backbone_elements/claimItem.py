from typing import Union, List, Optional

from pyspark.sql.types import StructType, StructField, StringType, DataType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class ClaimItemSchema:
    """
    A provider issued list of services and products provided, or to be provided,
    to a patient which is provided to an insurer for payment recovery.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
        extension_fields: Optional[List[str]] = [
            "valueBoolean",
            "valueCode",
            "valueDate",
            "valueDateTime",
            "valueDecimal",
            "valueId",
            "valueInteger",
            "valuePositiveInt",
            "valueString",
            "valueTime",
            "valueUnsignedInt",
            "valueUri",
            "valueQuantity",
        ],
        extension_depth: int = 0,
        max_extension_depth: Optional[int] = 2,
    ) -> Union[StructType, DataType]:
        """
        A provider issued list of services and products provided, or to be provided,
        to a patient which is provided to an insurer for payment recovery.


            id: None
            extension: May be used to represent additional information that is not part of the basic
        definition of the element. In order to make the use of extensions safe and
        manageable, there is a strict set of governance  applied to the definition and
        use of extensions. Though any implementer is allowed to define an extension,
        there is a set of requirements that SHALL be met as part of the definition of
        the extension.
            modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element, and that modifies the understanding of the element
        that contains it. Usually modifier elements provide negation or qualification.
        In order to make the use of extensions safe and manageable, there is a strict
        set of governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.
            sequence: A service line number.
            type: The type of product or service.
            provider: The practitioner who is responsible for the services rendered to the patient.
            diagnosisLinkId: Diagnosis applicable for this service or product line.
            service: If a grouping item then 'GROUP' otherwise it is a node therefore a code to
        indicate the Professional Service or Product supplied.
            serviceDate: The date when the enclosed suite of services were performed or completed.
            quantity: The number of repetitions of a service or product.
            unitPrice: If the item is a node then this is the fee for the product or service,
        otherwise this is the total of the fees for the children of the group.
            factor: A real number that represents a multiplier used in determining the overall
        value of services delivered and/or goods received. The concept of a Factor
        allows for a discount or surcharge multiplier to be applied to a monetary
        amount.
            points: An amount that expresses the weighting (based on difficulty, cost and/or
        resource intensiveness) associated with the good or service delivered. The
        concept of Points allows for assignment of point values for services and/or
        goods, such that a monetary amount can be assigned to each point.
            net: The quantity times the unit price for an additional  service or product or
        charge. For example, the formula: unit Quantity * unit Price (Cost per Point)
        * factor Number  * points = net Amount. Quantity, factor and points are
        assumed to be 1 if not supplied.
            udi: List of Unique Device Identifiers associated with this line item.
            bodySite: Physical service site on the patient (limb, tooth, etc.).
            subSite: A region or surface of the site, e.g. limb region or tooth surface(s).
            modifier: Item typification or modifiers codes, e.g. for Oral whether the treatment is
        cosmetic or associated with TMJ, or an appliance was lost or stolen.
            detail: Second tier of goods and services.
            prosthesis: The materials and placement date of prior fixed prosthesis.
        """
        if (
            max_recursion_limit
            and nesting_list.count("ClaimItem") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # Return at least one field in the struct or Spark throws an error
        # "Datasource does not support writing empty or nested empty schemas"
        return StructType([StructField("id", StringType(), True)])
