/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
Encounter.Hospitalization
    An interaction between a patient and healthcare provider(s) for the purpose of
    providing healthcare service(s) or assessing the health status of a patient.
*/
class EncounterHospitalization extends Element {
    /**
     * @param {id|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier|undefined} [preAdmissionIdentifier],
     * @param {Reference|undefined} [origin],
     * @param {CodeableConcept|undefined} [admitSource],
     * @param {Reference[]|undefined} [admittingDiagnosis],
     * @param {CodeableConcept|undefined} [reAdmission],
     * @param {CodeableConcept[]|undefined} [dietPreference],
     * @param {CodeableConcept[]|undefined} [specialCourtesy],
     * @param {CodeableConcept[]|undefined} [specialArrangement],
     * @param {Reference|undefined} [destination],
     * @param {CodeableConcept|undefined} [dischargeDisposition],
     * @param {Reference[]|undefined} [dischargeDiagnosis],
    */
    constructor(
        {
            id,
            extension,
            modifierExtension,
            preAdmissionIdentifier,
            origin,
            admitSource,
            admittingDiagnosis,
            reAdmission,
            dietPreference,
            specialCourtesy,
            specialArrangement,
            destination,
            dischargeDisposition,
            dischargeDiagnosis,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Pre-admission identifier.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'preAdmissionIdentifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.preAdmissionIdentifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.preAdmissionIdentifier = new Identifier(valueProvided);
            }
        });

        /**
         * @description The location from which the patient came before admission.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'origin', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.origin,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.origin = new Reference(valueProvided);
            }
        });

        /**
         * @description From where patient was admitted (physician referral, transfer).
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'admitSource', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.admitSource,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.admitSource = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The admitting diagnosis field is used to record the diagnosis codes as
    reported by admitting practitioner. This could be different or in addition to
    the conditions reported as reason-condition(s) for the encounter.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'admittingDiagnosis', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.admittingDiagnosis,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.admittingDiagnosis = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Whether this hospitalization is a readmission and why if known.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'reAdmission', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reAdmission,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reAdmission = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Diet preferences reported by the patient.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'dietPreference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dietPreference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.dietPreference = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Special courtesies (VIP, board member).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'specialCourtesy', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.specialCourtesy,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.specialCourtesy = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Wheelchair, translator, stretcher, etc.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'specialArrangement', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.specialArrangement,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.specialArrangement = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Location to which the patient is discharged.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'destination', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.destination,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.destination = new Reference(valueProvided);
            }
        });

        /**
         * @description Category or kind of location after discharge.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'dischargeDisposition', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dischargeDisposition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.dischargeDisposition = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The final diagnosis given a patient before release from the hospital after all
    testing, surgery, and workup are complete.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'dischargeDiagnosis', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dischargeDiagnosis,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.dischargeDiagnosis = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            modifierExtension,
            preAdmissionIdentifier,
            origin,
            admitSource,
            admittingDiagnosis,
            reAdmission,
            dietPreference,
            specialCourtesy,
            specialArrangement,
            destination,
            dischargeDisposition,
            dischargeDiagnosis,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            preAdmissionIdentifier: this.preAdmissionIdentifier && this.preAdmissionIdentifier.toJSON(),
            origin: this.origin && this.origin.toJSON(),
            admitSource: this.admitSource && this.admitSource.toJSON(),
            admittingDiagnosis: this.admittingDiagnosis && this.admittingDiagnosis.map(v => v.toJSON()),
            reAdmission: this.reAdmission && this.reAdmission.toJSON(),
            dietPreference: this.dietPreference && this.dietPreference.map(v => v.toJSON()),
            specialCourtesy: this.specialCourtesy && this.specialCourtesy.map(v => v.toJSON()),
            specialArrangement: this.specialArrangement && this.specialArrangement.map(v => v.toJSON()),
            destination: this.destination && this.destination.toJSON(),
            dischargeDisposition: this.dischargeDisposition && this.dischargeDisposition.toJSON(),
            dischargeDiagnosis: this.dischargeDiagnosis && this.dischargeDiagnosis.map(v => v.toJSON()),
        });
    }
}

module.exports = EncounterHospitalization;
