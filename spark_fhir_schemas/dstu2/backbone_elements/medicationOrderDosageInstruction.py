from typing import Union, List, Optional

from pyspark.sql.types import StructType, StructField, StringType, DataType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class MedicationOrderDosageInstructionSchema:
    """
    An order for both supply of the medication and the instructions for
    administration of the medication to a patient. The resource is called
    "MedicationOrder" rather than "MedicationPrescription" to generalize the use
    across inpatient and outpatient settings as well as for care plans, etc.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
        extension_fields: Optional[List[str]] = [
            "valueBoolean",
            "valueCode",
            "valueDate",
            "valueDateTime",
            "valueDecimal",
            "valueId",
            "valueInteger",
            "valuePositiveInt",
            "valueString",
            "valueTime",
            "valueUnsignedInt",
            "valueUri",
            "valueQuantity",
        ],
        extension_depth: int = 0,
        max_extension_depth: Optional[int] = 2,
    ) -> Union[StructType, DataType]:
        """
        An order for both supply of the medication and the instructions for
        administration of the medication to a patient. The resource is called
        "MedicationOrder" rather than "MedicationPrescription" to generalize the use
        across inpatient and outpatient settings as well as for care plans, etc.


            id: None
            extension: May be used to represent additional information that is not part of the basic
        definition of the element. In order to make the use of extensions safe and
        manageable, there is a strict set of governance  applied to the definition and
        use of extensions. Though any implementer is allowed to define an extension,
        there is a set of requirements that SHALL be met as part of the definition of
        the extension.
            modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element, and that modifies the understanding of the element
        that contains it. Usually modifier elements provide negation or qualification.
        In order to make the use of extensions safe and manageable, there is a strict
        set of governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.
            text: Free text dosage instructions can be used for cases where the instructions are
        too complex to code.  The content of this attribute does not include the name
        or description of the medication. When coded instructions are present, the
        free text instructions may still be present for display to humans taking or
        administering the medication. It is expected that the text instructions will
        always be populated.  If the dosage.timing attribute is also populated, then
        the dosage.text should reflect the same information as the timing.
            additionalInstructions: Additional instructions such as "Swallow with plenty of water" which may or
        may not be coded.
            timing: The timing schedule for giving the medication to the patient. The Schedule
        data type allows many different expressions. For example: "Every 8 hours";
        "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec
        2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
            asNeededBoolean: None
            asNeededCodeableConcept: None
            siteCodeableConcept: None
            siteReference: None
            route: A code specifying the route or physiological path of administration of a
        therapeutic agent into or onto a patient's body.
            method: A coded value indicating the method by which the medication is introduced into
        or onto the body. Most commonly used for injections.  For examples, Slow Push;
        Deep IV.
            doseRange: None
            doseQuantity: None
            rateRatio: None
            rateRange: None
            maxDosePerPeriod: The maximum total quantity of a therapeutic substance that may be administered
        to a subject over the period of time.  For example, 1000mg in 24 hours.
        """
        if (
            max_recursion_limit
            and nesting_list.count("MedicationOrderDosageInstruction")
            >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # Return at least one field in the struct or Spark throws an error
        # "Datasource does not support writing empty or nested empty schemas"
        return StructType([StructField("id", StringType(), True)])
