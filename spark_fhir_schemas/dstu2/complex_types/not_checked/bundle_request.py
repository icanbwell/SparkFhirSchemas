from typing import List
from typing import Optional
from typing import Union

from pyspark.sql.types import DataType
from pyspark.sql.types import StringType
from pyspark.sql.types import StructField
from pyspark.sql.types import StructType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class Bundle_RequestSchema:
    """
    A container for a collection of resources.
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
    ) -> Union[StructType, DataType]:
        """
        A container for a collection of resources.


        method: The HTTP verb for this entry in either a change history, or a transaction/
            transaction response.

        url: The URL for this entry, relative to the root (the address to which the request
            is posted).

        ifNoneMatch: If the ETag values match, return a 304 Not Modified status. See the API
            documentation for ["Conditional Read"](http.html#cread).

        ifModifiedSince: Only perform the operation if the last updated date matches. See the API
            documentation for ["Conditional Read"](http.html#cread).

        ifMatch: Only perform the operation if the Etag value matches. For more information,
            see the API section ["Managing Resource Contention"](http.html#concurrency).

        ifNoneExist: Instruct the server not to perform the create if a specified resource already
            exists. For further information, see the API documentation for ["Conditional
            Create"](http.html#ccreate). This is just the query portion of the URL - what
            follows the "?" (not including the "?").

        """
        if (
            max_recursion_limit
            and nesting_list.count("Bundle_Request") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # add my name to recursion list for later
        my_nesting_list: List[str] = nesting_list + ["Bundle_Request"]
        schema = StructType(
            [
                # The HTTP verb for this entry in either a change history, or a transaction/
                # transaction response.
                StructField("method", StringType(), True),
                # The URL for this entry, relative to the root (the address to which the request
                # is posted).
                StructField("url", StringType(), True),
                # If the ETag values match, return a 304 Not Modified status. See the API
                # documentation for ["Conditional Read"](http.html#cread).
                StructField("ifNoneMatch", StringType(), True),
                # Only perform the operation if the last updated date matches. See the API
                # documentation for ["Conditional Read"](http.html#cread).
                StructField("ifModifiedSince", StringType(), True),
                # Only perform the operation if the Etag value matches. For more information,
                # see the API section ["Managing Resource Contention"](http.html#concurrency).
                StructField("ifMatch", StringType(), True),
                # Instruct the server not to perform the create if a specified resource already
                # exists. For further information, see the API documentation for ["Conditional
                # Create"](http.html#ccreate). This is just the query portion of the URL - what
                # follows the "?" (not including the "?").
                StructField("ifNoneExist", StringType(), True),
            ]
        )
        if not include_extension:
            schema.fields = [
                c
                if c.name != "extension"
                else StructField("extension", StringType(), True)
                for c in schema.fields
            ]
        return schema
