/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Element = require('../complex_types/element');


/**
Timing.Repeat
    Specifies an event that may occur multiple times. Timing schedules are used to
    record when things are expected or requested to occur. The most common usage
    is in dosage instructions for medications. They are also used when planning
    care of various kinds.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
*/
class TimingRepeat extends Element {
    /**
     * @param {id|undefined} [id],
     * @param {Extension[]|undefined} [extension],
     * @param {Duration|undefined} [boundsQuantity],
     * @param {Range|undefined} [boundsRange],
     * @param {Period|undefined} [boundsPeriod],
     * @param {Int|undefined} [count],
     * @param {decimal|undefined} [duration],
     * @param {decimal|undefined} [durationMax],
     * @param {code|undefined} [durationUnits],
     * @param {Int|undefined} [frequency],
     * @param {Int|undefined} [frequencyMax],
     * @param {decimal|undefined} [period],
     * @param {decimal|undefined} [periodMax],
     * @param {code|undefined} [periodUnits],
     * @param {code|undefined} [when],
    */
    constructor(
        {
            id,
            extension,
            boundsQuantity,
            boundsRange,
            boundsPeriod,
            count,
            duration,
            durationMax,
            durationUnits,
            frequency,
            frequencyMax,
            period,
            periodMax,
            periodUnits,
            when,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description None
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the element. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description None
         * @property {Duration|undefined}
        */
        Object.defineProperty(this, 'boundsQuantity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.boundsQuantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.boundsQuantity = valueProvided;
            }
        });

        /**
         * @description None
         * @property {Range|undefined}
        */
        Object.defineProperty(this, 'boundsRange', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.boundsRange,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Range = require('../complex_types/range.js');
                this.__data.boundsRange = new Range(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'boundsPeriod', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.boundsPeriod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.boundsPeriod = new Period(valueProvided);
            }
        });

        /**
         * @description A total count of the desired number of repetitions.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'count', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.count,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.count = valueProvided;
            }
        });

        /**
         * @description How long this thing happens for when it happens.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'duration', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.duration,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.duration = valueProvided;
            }
        });

        /**
         * @description The upper limit of how long this thing happens for when it happens.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'durationMax', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.durationMax,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.durationMax = valueProvided;
            }
        });

        /**
         * @description The units of time for the duration, in UCUM units.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'durationUnits', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.durationUnits,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.durationUnits = valueProvided;
            }
        });

        /**
         * @description The number of times to repeat the action within the specified period / period
    range (i.e. both period and periodMax provided).
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'frequency', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.frequency,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.frequency = valueProvided;
            }
        });

        /**
         * @description If present, indicates that the frequency is a range - so repeat between
    [frequency] and [frequencyMax] times within the period or period range.
         * @property {Int|undefined}
        */
        Object.defineProperty(this, 'frequencyMax', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.frequencyMax,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.frequencyMax = valueProvided;
            }
        });

        /**
         * @description Indicates the duration of time over which repetitions are to occur; e.g. to
    express "3 times per day", 3 would be the frequency and "1 day" would be the
    period.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'period', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.period,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.period = valueProvided;
            }
        });

        /**
         * @description If present, indicates that the period is a range from [period] to [periodMax],
    allowing expressing concepts such as "do this once every 3-5 days.
         * @property {decimal|undefined}
        */
        Object.defineProperty(this, 'periodMax', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.periodMax,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.periodMax = valueProvided;
            }
        });

        /**
         * @description The units of time for the period in UCUM units.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'periodUnits', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.periodUnits,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.periodUnits = valueProvided;
            }
        });

        /**
         * @description A real world event that the occurrence of the event should be tied to.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'when', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.when,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.when = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            extension,
            boundsQuantity,
            boundsRange,
            boundsPeriod,
            count,
            duration,
            durationMax,
            durationUnits,
            frequency,
            frequencyMax,
            period,
            periodMax,
            periodUnits,
            when,
        });

    }



    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            id: this.id,
            extension: this.extension && this.extension.map(v => v.toJSON()),
            boundsQuantity: this.boundsQuantity,
            boundsRange: this.boundsRange && this.boundsRange.toJSON(),
            boundsPeriod: this.boundsPeriod && this.boundsPeriod.toJSON(),
            count: this.count,
            duration: this.duration,
            durationMax: this.durationMax,
            durationUnits: this.durationUnits,
            frequency: this.frequency,
            frequencyMax: this.frequencyMax,
            period: this.period,
            periodMax: this.periodMax,
            periodUnits: this.periodUnits,
            when: this.when,
        });
    }
}

module.exports = TimingRepeat;
