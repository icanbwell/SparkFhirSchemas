from typing import Union, List, Optional

from pyspark.sql.types import StructType, StructField, StringType, DataType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class ElementDefinitionSchema:
    """
    Captures constraints on each element within the resource, profile, or
    extension.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
        extension_fields: Optional[List[str]] = [
            "valueBoolean",
            "valueCode",
            "valueDate",
            "valueDateTime",
            "valueDecimal",
            "valueId",
            "valueInteger",
            "valuePositiveInt",
            "valueString",
            "valueTime",
            "valueUnsignedInt",
            "valueUri",
            "valueQuantity",
        ],
        extension_depth: int = 0,
        max_extension_depth: Optional[int] = 2,
    ) -> Union[StructType, DataType]:
        """
        Captures constraints on each element within the resource, profile, or
        extension.
        If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions


            id: None
            extension: May be used to represent additional information that is not part of the basic
        definition of the element. In order to make the use of extensions safe and
        manageable, there is a strict set of governance  applied to the definition and
        use of extensions. Though any implementer is allowed to define an extension,
        there is a set of requirements that SHALL be met as part of the definition of
        the extension.
            path: The path identifies the element and is expressed as a "."-separated list of
        ancestor elements, beginning with the name of the resource or extension.
            representation: Codes that define how this element is represented in instances, when the
        deviation varies from the normal case.
            name: The name of this element definition (to refer to it from other element
        definitions using ElementDefinition.nameReference). This is a unique name
        referring to a specific set of constraints applied to this element. One use of
        this is to provide a name to different slices of the same element.
            label: The text to display beside the element indicating its meaning or to use to
        prompt for the element in a user display or form.
            code: A code that provides the meaning for the element according to a particular
        terminology.
            slicing: Indicates that the element is sliced into a set of alternative definitions
        (i.e. in a structure definition, there are multiple different constraints on a
        single element in the base resource). Slicing can be used in any resource that
        has cardinality ..* on the base resource, or any resource with a choice of
        types. The set of slices is any elements that come after this in the element
        sequence that have the same path, until a shorter path occurs (the shorter
        path terminates the set).
            short: A concise description of what this element means (e.g. for use in
        autogenerated summaries).
            definition: Provides a complete explanation of the meaning of the data element for human
        readability.  For the case of elements derived from existing elements (e.g.
        constraints), the definition SHALL be consistent with the base definition, but
        convey the meaning of the element in the particular context of use of the
        resource.
            comments: Explanatory notes and implementation guidance about the data element,
        including notes about how to use the data properly, exceptions to proper use,
        etc.
            requirements: This element is for traceability of why the element was created and why the
        constraints exist as they do. This may be used to point to source materials or
        specifications that drove the structure of this element.
            alias: Identifies additional names by which this element might also be known.
            min: The minimum number of times this element SHALL appear in the instance.
            max: The maximum number of times this element is permitted to appear in the
        instance.
            base: Information about the base definition of the element, provided to make it
        unncessary for tools to trace the deviation of the element through the derived
        and related profiles. This information is only provided where the element
        definition represents a constraint on another element definition, and must be
        present if there is a base element definition.
            type: The data type or resource that the value of this element is permitted to be.
            nameReference: Identifies the name of a slice defined elsewhere in the profile whose
        constraints should be applied to the current element.
            defaultValueBoolean: None
            defaultValueInteger: None
            defaultValueDecimal: None
            defaultValueBase64Binary: None
            defaultValueInstant: None
            defaultValueString: None
            defaultValueUri: None
            defaultValueDate: None
            defaultValueDateTime: None
            defaultValueTime: None
            defaultValueCode: None
            defaultValueOid: None
            defaultValueUuid: None
            defaultValueId: None
            defaultValueUnsignedInt: None
            defaultValuePositiveInt: None
            defaultValueMarkdown: None
            defaultValueAnnotation: None
            defaultValueAttachment: None
            defaultValueIdentifier: None
            defaultValueCodeableConcept: None
            defaultValueCoding: None
            defaultValueQuantity: None
            defaultValueRange: None
            defaultValuePeriod: None
            defaultValueRatio: None
            defaultValueReference: None
            defaultValueSampledData: None
            defaultValueSignature: None
            defaultValueHumanName: None
            defaultValueAddress: None
            defaultValueContactPoint: None
            defaultValueTiming: None
            defaultValueMeta: None
            meaningWhenMissing: The Implicit meaning that is to be understood when this element is missing
        (e.g. 'when this element is missing, the period is ongoing'.
            fixedBoolean: None
            fixedInteger: None
            fixedDecimal: None
            fixedBase64Binary: None
            fixedInstant: None
            fixedString: None
            fixedUri: None
            fixedDate: None
            fixedDateTime: None
            fixedTime: None
            fixedCode: None
            fixedOid: None
            fixedUuid: None
            fixedId: None
            fixedUnsignedInt: None
            fixedPositiveInt: None
            fixedMarkdown: None
            fixedAnnotation: None
            fixedAttachment: None
            fixedIdentifier: None
            fixedCodeableConcept: None
            fixedCoding: None
            fixedQuantity: None
            fixedRange: None
            fixedPeriod: None
            fixedRatio: None
            fixedReference: None
            fixedSampledData: None
            fixedSignature: None
            fixedHumanName: None
            fixedAddress: None
            fixedContactPoint: None
            fixedTiming: None
            fixedMeta: None
            patternBoolean: None
            patternInteger: None
            patternDecimal: None
            patternBase64Binary: None
            patternInstant: None
            patternString: None
            patternUri: None
            patternDate: None
            patternDateTime: None
            patternTime: None
            patternCode: None
            patternOid: None
            patternUuid: None
            patternId: None
            patternUnsignedInt: None
            patternPositiveInt: None
            patternMarkdown: None
            patternAnnotation: None
            patternAttachment: None
            patternIdentifier: None
            patternCodeableConcept: None
            patternCoding: None
            patternQuantity: None
            patternRange: None
            patternPeriod: None
            patternRatio: None
            patternReference: None
            patternSampledData: None
            patternSignature: None
            patternHumanName: None
            patternAddress: None
            patternContactPoint: None
            patternTiming: None
            patternMeta: None
            exampleBoolean: None
            exampleInteger: None
            exampleDecimal: None
            exampleBase64Binary: None
            exampleInstant: None
            exampleString: None
            exampleUri: None
            exampleDate: None
            exampleDateTime: None
            exampleTime: None
            exampleCode: None
            exampleOid: None
            exampleUuid: None
            exampleId: None
            exampleUnsignedInt: None
            examplePositiveInt: None
            exampleMarkdown: None
            exampleAnnotation: None
            exampleAttachment: None
            exampleIdentifier: None
            exampleCodeableConcept: None
            exampleCoding: None
            exampleQuantity: None
            exampleRange: None
            examplePeriod: None
            exampleRatio: None
            exampleReference: None
            exampleSampledData: None
            exampleSignature: None
            exampleHumanName: None
            exampleAddress: None
            exampleContactPoint: None
            exampleTiming: None
            exampleMeta: None
            minValueBoolean: None
            minValueInteger: None
            minValueDecimal: None
            minValueBase64Binary: None
            minValueInstant: None
            minValueString: None
            minValueUri: None
            minValueDate: None
            minValueDateTime: None
            minValueTime: None
            minValueCode: None
            minValueOid: None
            minValueUuid: None
            minValueId: None
            minValueUnsignedInt: None
            minValuePositiveInt: None
            minValueMarkdown: None
            minValueAnnotation: None
            minValueAttachment: None
            minValueIdentifier: None
            minValueCodeableConcept: None
            minValueCoding: None
            minValueQuantity: None
            minValueRange: None
            minValuePeriod: None
            minValueRatio: None
            minValueReference: None
            minValueSampledData: None
            minValueSignature: None
            minValueHumanName: None
            minValueAddress: None
            minValueContactPoint: None
            minValueTiming: None
            minValueMeta: None
            maxValueBoolean: None
            maxValueInteger: None
            maxValueDecimal: None
            maxValueBase64Binary: None
            maxValueInstant: None
            maxValueString: None
            maxValueUri: None
            maxValueDate: None
            maxValueDateTime: None
            maxValueTime: None
            maxValueCode: None
            maxValueOid: None
            maxValueUuid: None
            maxValueId: None
            maxValueUnsignedInt: None
            maxValuePositiveInt: None
            maxValueMarkdown: None
            maxValueAnnotation: None
            maxValueAttachment: None
            maxValueIdentifier: None
            maxValueCodeableConcept: None
            maxValueCoding: None
            maxValueQuantity: None
            maxValueRange: None
            maxValuePeriod: None
            maxValueRatio: None
            maxValueReference: None
            maxValueSampledData: None
            maxValueSignature: None
            maxValueHumanName: None
            maxValueAddress: None
            maxValueContactPoint: None
            maxValueTiming: None
            maxValueMeta: None
            maxLength: Indicates the maximum length in characters that is permitted to be present in
        conformant instances and which is expected to be supported by conformant
        consumers that support the element.
            condition: A reference to an invariant that may make additional statements about the
        cardinality or value in the instance.
            constraint: Formal constraints such as co-occurrence and other constraints that can be
        computationally evaluated within the context of the instance.
            mustSupport: If true, implementations that produce or consume resources SHALL provide
        "support" for the element in some meaningful way.  If false, the element may
        be ignored and not supported.
            isModifier: If true, the value of this element affects the interpretation of the element
        or resource that contains it, and the value of the element cannot be ignored.
        Typically, this is used for status, negation and qualification codes. The
        effect of this is that the element cannot be ignored by systems: they SHALL
        either recognize the element and process it, and/or a pre-determination has
        been made that it is not relevant to their particular system.
            isSummary: Whether the element should be included if a client requests a search with the
        parameter _summary=true.
            binding: Binds to a value set if this element is coded (code, Coding, CodeableConcept).
            mapping: Identifies a concept from an external specification that roughly corresponds
        to this element.
        """
        if (
            max_recursion_limit
            and nesting_list.count("ElementDefinition") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # Return at least one field in the struct or Spark throws an error
        # "Datasource does not support writing empty or nested empty schemas"
        return StructType([StructField("id", StringType(), True)])
