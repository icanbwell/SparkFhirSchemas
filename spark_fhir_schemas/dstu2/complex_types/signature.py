from typing import Union, List, Optional

from pyspark.sql.types import StructType, StructField, StringType, DataType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class SignatureSchema:
    """
    A digital signature along with supporting context. The signature may be
    electronic/cryptographic in nature, or a graphical image representing a hand-
    written signature, or a signature process. Different Signature approaches have
    different utilities.
    If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
        extension_fields: Optional[List[str]] = [
            "valueBoolean",
            "valueCode",
            "valueDate",
            "valueDateTime",
            "valueDecimal",
            "valueId",
            "valueInteger",
            "valuePositiveInt",
            "valueString",
            "valueTime",
            "valueUnsignedInt",
            "valueUri",
            "valueQuantity",
        ],
        extension_depth: int = 0,
        max_extension_depth: Optional[int] = 2,
    ) -> Union[StructType, DataType]:
        """
        A digital signature along with supporting context. The signature may be
        electronic/cryptographic in nature, or a graphical image representing a hand-
        written signature, or a signature process. Different Signature approaches have
        different utilities.
        If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions


            id: None
            extension: May be used to represent additional information that is not part of the basic
        definition of the element. In order to make the use of extensions safe and
        manageable, there is a strict set of governance  applied to the definition and
        use of extensions. Though any implementer is allowed to define an extension,
        there is a set of requirements that SHALL be met as part of the definition of
        the extension.
            type: An indication of the reason that the entity signed this document. This may be
        explicitly included as part of the signature information and can be used when
        determining accountability for various actions concerning the document.
            when: When the digital signature was signed.
            whoUri: None
            whoReference: None
            contentType: A mime type that indicates the technical format of the signature. Important
        mime types are application/signature+xml for X ML DigSig, application/jwt for
        JWT, and image/* for a graphical image of a signature.
            blob: The base64 encoding of the Signature content.
        """
        if (
            max_recursion_limit
            and nesting_list.count("Signature") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # Return at least one field in the struct or Spark throws an error
        # "Datasource does not support writing empty or nested empty schemas"
        return StructType([StructField("id", StringType(), True)])
