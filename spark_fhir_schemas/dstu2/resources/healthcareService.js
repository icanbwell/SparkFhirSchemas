/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
HealthcareService
    The details of a healthcare service available at a location.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class HealthcareService extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {Reference|undefined} [providedBy],
     * @param {CodeableConcept|undefined} [serviceCategory],
     * @param {HealthcareServiceServiceType[]|undefined} [serviceType],
     * @param {Reference} location,
     * @param {String|undefined} [serviceName],
     * @param {String|undefined} [comment],
     * @param {String|undefined} [extraDetails],
     * @param {Attachment|undefined} [photo],
     * @param {ContactPoint[]|undefined} [telecom],
     * @param {Reference[]|undefined} [coverageArea],
     * @param {CodeableConcept[]|undefined} [serviceProvisionCode],
     * @param {CodeableConcept|undefined} [eligibility],
     * @param {String|undefined} [eligibilityNote],
     * @param {String[]|undefined} [programName],
     * @param {CodeableConcept[]|undefined} [characteristic],
     * @param {CodeableConcept[]|undefined} [referralMethod],
     * @param {String|undefined} [publicKey],
     * @param {Boolean|undefined} [appointmentRequired],
     * @param {HealthcareServiceAvailableTime[]|undefined} [availableTime],
     * @param {HealthcareServiceNotAvailable[]|undefined} [notAvailable],
     * @param {String|undefined} [availabilityExceptions],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            providedBy,
            serviceCategory,
            serviceType,
            location,
            serviceName,
            comment,
            extraDetails,
            photo,
            telecom,
            coverageArea,
            serviceProvisionCode,
            eligibility,
            eligibilityNote,
            programName,
            characteristic,
            referralMethod,
            publicKey,
            appointmentRequired,
            availableTime,
            notAvailable,
            availabilityExceptions,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content may not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource, and may be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description External identifiers for this item.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The organization that provides this healthcare service.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'providedBy', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.providedBy,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.providedBy = new Reference(valueProvided);
            }
        });

        /**
         * @description Identifies the broad category of service being performed or delivered.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'serviceCategory', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.serviceCategory,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.serviceCategory = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A specific type of service that may be delivered or performed.
         * @property {HealthcareServiceServiceType[]|undefined}
        */
        Object.defineProperty(this, 'serviceType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.serviceType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let HealthcareServiceServiceType = require('../backbone_elements/healthcareServiceServiceType.js');
                this.__data.serviceType = Array.isArray(valueProvided) ? valueProvided.map(v => new HealthcareServiceServiceType(v)) : [new HealthcareServiceServiceType(valueProvided)];
            }
        });

        /**
         * @description The location where this healthcare service may be provided.
         * @property {Reference}
        */
        Object.defineProperty(this, 'location', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.location,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.location = new Reference(valueProvided);
            }
        });

        /**
         * @description Further description of the service as it would be presented to a consumer
    while searching.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'serviceName', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.serviceName,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.serviceName = valueProvided;
            }
        });

        /**
         * @description Any additional description of the service and/or any specific issues not
    covered by the other attributes, which can be displayed as further detail
    under the serviceName.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'comment', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.comment,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.comment = valueProvided;
            }
        });

        /**
         * @description Extra details about the service that can't be placed in the other fields.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'extraDetails', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extraDetails,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.extraDetails = valueProvided;
            }
        });

        /**
         * @description If there is a photo/symbol associated with this HealthcareService, it may be
    included here to facilitate quick identification of the service in a list.
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'photo', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.photo,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.photo = new Attachment(valueProvided);
            }
        });

        /**
         * @description List of contacts related to this specific healthcare service.
         * @property {ContactPoint[]|undefined}
        */
        Object.defineProperty(this, 'telecom', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.telecom,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ContactPoint = require('../complex_types/contactPoint.js');
                this.__data.telecom = Array.isArray(valueProvided) ? valueProvided.map(v => new ContactPoint(v)) : [new ContactPoint(valueProvided)];
            }
        });

        /**
         * @description The location(s) that this service is available to (not where the service is
    provided).
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'coverageArea', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.coverageArea,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.coverageArea = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description The code(s) that detail the conditions under which the healthcare service is
    available/offered.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'serviceProvisionCode', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.serviceProvisionCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.serviceProvisionCode = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Does this service have specific eligibility requirements that need to be met
    in order to use the service?
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'eligibility', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.eligibility,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.eligibility = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description Describes the eligibility conditions for the service.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'eligibilityNote', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.eligibilityNote,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.eligibilityNote = valueProvided;
            }
        });

        /**
         * @description Program Names that can be used to categorize the service.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'programName', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.programName,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.programName = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description Collection of characteristics (attributes).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'characteristic', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.characteristic,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.characteristic = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Ways that the service accepts referrals, if this is not provided then it is
    implied that no referral is required.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'referralMethod', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.referralMethod,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.referralMethod = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description The public part of the 'keys' allocated to an Organization by an accredited
    body to support secure exchange of data over the internet. To be provided by
    the Organization, where available.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publicKey', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.publicKey,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.publicKey = valueProvided;
            }
        });

        /**
         * @description Indicates whether or not a prospective consumer will require an appointment
    for a particular service at a site to be provided by the Organization.
    Indicates if an appointment is required for access to this service.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'appointmentRequired', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.appointmentRequired,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.appointmentRequired = valueProvided;
            }
        });

        /**
         * @description A collection of times that the Service Site is available.
         * @property {HealthcareServiceAvailableTime[]|undefined}
        */
        Object.defineProperty(this, 'availableTime', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.availableTime,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let HealthcareServiceAvailableTime = require('../backbone_elements/healthcareServiceAvailableTime.js');
                this.__data.availableTime = Array.isArray(valueProvided) ? valueProvided.map(v => new HealthcareServiceAvailableTime(v)) : [new HealthcareServiceAvailableTime(valueProvided)];
            }
        });

        /**
         * @description The HealthcareService is not available during this period of time due to the
    provided reason.
         * @property {HealthcareServiceNotAvailable[]|undefined}
        */
        Object.defineProperty(this, 'notAvailable', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.notAvailable,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let HealthcareServiceNotAvailable = require('../backbone_elements/healthcareServiceNotAvailable.js');
                this.__data.notAvailable = Array.isArray(valueProvided) ? valueProvided.map(v => new HealthcareServiceNotAvailable(v)) : [new HealthcareServiceNotAvailable(valueProvided)];
            }
        });

        /**
         * @description A description of site availability exceptions, e.g. public holiday
    availability. Succinctly describing all possible exceptions to normal site
    availability as details in the available Times and not available Times.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'availabilityExceptions', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.availabilityExceptions,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.availabilityExceptions = valueProvided;
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            providedBy,
            serviceCategory,
            serviceType,
            location,
            serviceName,
            comment,
            extraDetails,
            photo,
            telecom,
            coverageArea,
            serviceProvisionCode,
            eligibility,
            eligibilityNote,
            programName,
            characteristic,
            referralMethod,
            publicKey,
            appointmentRequired,
            availableTime,
            notAvailable,
            availabilityExceptions,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'HealthcareService',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'HealthcareService';
    }

    /**
     * @description Creates a blank new resource
     * @returns {HealthcareService}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {Reference|undefined} [providedBy],
     * @param {CodeableConcept|undefined} [serviceCategory],
     * @param {HealthcareServiceServiceType[]|undefined} [serviceType],
     * @param {Reference} location,
     * @param {String|undefined} [serviceName],
     * @param {String|undefined} [comment],
     * @param {String|undefined} [extraDetails],
     * @param {Attachment|undefined} [photo],
     * @param {ContactPoint[]|undefined} [telecom],
     * @param {Reference[]|undefined} [coverageArea],
     * @param {CodeableConcept[]|undefined} [serviceProvisionCode],
     * @param {CodeableConcept|undefined} [eligibility],
     * @param {String|undefined} [eligibilityNote],
     * @param {String[]|undefined} [programName],
     * @param {CodeableConcept[]|undefined} [characteristic],
     * @param {CodeableConcept[]|undefined} [referralMethod],
     * @param {String|undefined} [publicKey],
     * @param {Boolean|undefined} [appointmentRequired],
     * @param {HealthcareServiceAvailableTime[]|undefined} [availableTime],
     * @param {HealthcareServiceNotAvailable[]|undefined} [notAvailable],
     * @param {String|undefined} [availabilityExceptions],
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            providedBy,
            serviceCategory,
            serviceType,
            location,
            serviceName,
            comment,
            extraDetails,
            photo,
            telecom,
            coverageArea,
            serviceProvisionCode,
            eligibility,
            eligibilityNote,
            programName,
            characteristic,
            referralMethod,
            publicKey,
            appointmentRequired,
            availableTime,
            notAvailable,
            availabilityExceptions,
        }
    ) {
        return new HealthcareService({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            providedBy,
            serviceCategory,
            serviceType,
            location,
            serviceName,
            comment,
            extraDetails,
            photo,
            telecom,
            coverageArea,
            serviceProvisionCode,
            eligibility,
            eligibilityNote,
            programName,
            characteristic,
            referralMethod,
            publicKey,
            appointmentRequired,
            availableTime,
            notAvailable,
            availabilityExceptions,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {HealthcareService}
    */
    copy() {
        return new HealthcareService(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            providedBy: this.providedBy && this.providedBy.toJSON(),
            serviceCategory: this.serviceCategory && this.serviceCategory.toJSON(),
            serviceType: this.serviceType && this.serviceType.map(v => v.toJSON()),
            location: this.location && this.location.toJSON(),
            serviceName: this.serviceName,
            comment: this.comment,
            extraDetails: this.extraDetails,
            photo: this.photo && this.photo.toJSON(),
            telecom: this.telecom && this.telecom.map(v => v.toJSON()),
            coverageArea: this.coverageArea && this.coverageArea.map(v => v.toJSON()),
            serviceProvisionCode: this.serviceProvisionCode && this.serviceProvisionCode.map(v => v.toJSON()),
            eligibility: this.eligibility && this.eligibility.toJSON(),
            eligibilityNote: this.eligibilityNote,
            programName: this.programName,
            characteristic: this.characteristic && this.characteristic.map(v => v.toJSON()),
            referralMethod: this.referralMethod && this.referralMethod.map(v => v.toJSON()),
            publicKey: this.publicKey,
            appointmentRequired: this.appointmentRequired,
            availableTime: this.availableTime && this.availableTime.map(v => v.toJSON()),
            notAvailable: this.notAvailable && this.notAvailable.map(v => v.toJSON()),
            availabilityExceptions: this.availabilityExceptions,
        });
    }
}

module.exports = HealthcareService;
