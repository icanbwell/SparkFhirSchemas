/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
StructureDefinition
    A definition of a FHIR structure. This resource is used to describe the
    underlying resources, data types defined in FHIR, and also for describing
    extensions, and constraints on resources and data types.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class StructureDefinition extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri} url,
     * @param {Identifier[]|undefined} [identifier],
     * @param {String|undefined} [version],
     * @param {String} name,
     * @param {String|undefined} [display],
     * @param {code} status,
     * @param {Boolean|undefined} [experimental],
     * @param {String|undefined} [publisher],
     * @param {StructureDefinitionContact[]|undefined} [contact],
     * @param {dateTime|undefined} [date],
     * @param {String|undefined} [description],
     * @param {CodeableConcept[]|undefined} [useContext],
     * @param {String|undefined} [requirements],
     * @param {String|undefined} [copyright],
     * @param {Coding[]|undefined} [code],
     * @param {id|undefined} [fhirVersion],
     * @param {StructureDefinitionMapping[]|undefined} [mapping],
     * @param {code} kind,
     * @param {code|undefined} [constrainedType],
     * @param {Boolean} abstract,
     * @param {code|undefined} [contextType],
     * @param {String[]|undefined} [context],
     * @param {uri|undefined} [base],
     * @param {StructureDefinitionSnapshot|undefined} [snapshot],
     * @param {StructureDefinitionDifferential|undefined} [differential],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            display,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            requirements,
            copyright,
            code,
            fhirVersion,
            mapping,
            kind,
            constrainedType,
            abstract,
            contextType,
            context,
            base,
            snapshot,
            differential,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content may not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource, and may be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description An absolute URL that is used to identify this structure definition when it is
    referenced in a specification, model, design or an instance. This SHALL be a
    URL, SHOULD be globally unique, and SHOULD be an address at which this
    structure definition is (or will be) published.
         * @property {uri}
        */
        Object.defineProperty(this, 'url', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.url,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.url = valueProvided;
            }
        });

        /**
         * @description Formal identifier that is used to identify this StructureDefinition when it is
    represented in other formats, or referenced in a specification, model, design
    or an instance  (should be globally unique OID, UUID, or URI), (if it's not
    possible to use the literal URI).
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The identifier that is used to identify this version of the
    StructureDefinition when it is referenced in a specification, model, design or
    instance. This is an arbitrary value managed by the StructureDefinition author
    manually.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.version,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.version = valueProvided;
            }
        });

        /**
         * @description A free text natural language name identifying the StructureDefinition.
         * @property {String}
        */
        Object.defineProperty(this, 'name', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description Defined so that applications can use this name when displaying the value of
    the extension to the user.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'display', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.display,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.display = valueProvided;
            }
        });

        /**
         * @description The status of the StructureDefinition.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description This StructureDefinition was authored for testing purposes (or
    education/evaluation/marketing), and is not intended to be used for genuine
    usage.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'experimental', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.experimental,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.experimental = valueProvided;
            }
        });

        /**
         * @description The name of the individual or organization that published the structure
    definition.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.publisher,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.publisher = valueProvided;
            }
        });

        /**
         * @description Contacts to assist a user in finding and communicating with the publisher.
         * @property {StructureDefinitionContact[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let StructureDefinitionContact = require('../backbone_elements/structureDefinitionContact.js');
                this.__data.contact = Array.isArray(valueProvided) ? valueProvided.map(v => new StructureDefinitionContact(v)) : [new StructureDefinitionContact(valueProvided)];
            }
        });

        /**
         * @description The date this version of the structure definition was published. The date must
    change when the business version changes, if it does, and it must change if
    the status code changes. In addition, it should change when the substantive
    content of the structure definition changes.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.date,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.date = valueProvided;
            }
        });

        /**
         * @description A free text natural language description of the StructureDefinition and its
    use.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These terms may be used to assist with indexing and searching
    of structure definitions.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.useContext,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.useContext = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Explains why this structure definition is needed and why it's been constrained
    as it has.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'requirements', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.requirements,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.requirements = valueProvided;
            }
        });

        /**
         * @description A copyright statement relating to the structure definition and/or its
    contents. Copyright statements are generally legal restrictions on the use and
    publishing of the details of the constraints and mappings.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.copyright,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.copyright = valueProvided;
            }
        });

        /**
         * @description A set of terms from external terminologies that may be used to assist with
    indexing and searching of templates.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'code', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.code,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.code = Array.isArray(valueProvided) ? valueProvided.map(v => new Coding(v)) : [new Coding(valueProvided)];
            }
        });

        /**
         * @description The version of the FHIR specification on which this StructureDefinition is
    based - this is the formal version of the specification, without the revision
    number, e.g. [publication].[major].[minor], which is 1.0.2 for this version.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'fhirVersion', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.fhirVersion,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.fhirVersion = valueProvided;
            }
        });

        /**
         * @description An external specification that the content is mapped to.
         * @property {StructureDefinitionMapping[]|undefined}
        */
        Object.defineProperty(this, 'mapping', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.mapping,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let StructureDefinitionMapping = require('../backbone_elements/structureDefinitionMapping.js');
                this.__data.mapping = Array.isArray(valueProvided) ? valueProvided.map(v => new StructureDefinitionMapping(v)) : [new StructureDefinitionMapping(valueProvided)];
            }
        });

        /**
         * @description Defines the kind of structure that this definition is describing.
         * @property {code}
        */
        Object.defineProperty(this, 'kind', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.kind,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.kind = valueProvided;
            }
        });

        /**
         * @description The type of type that is being constrained - a data type, an extension, a
    resource, including abstract ones. If this field is present, it indicates that
    the structure definition is a constraint. If it is not present, then the
    structure definition is the definition of a base structure.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'constrainedType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.constrainedType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.constrainedType = valueProvided;
            }
        });

        /**
         * @description Whether structure this definition describes is abstract or not  - that is,
    whether an actual exchanged item can ever be of this type.
         * @property {Boolean}
        */
        Object.defineProperty(this, 'abstract', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.abstract,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.abstract = valueProvided;
            }
        });

        /**
         * @description If this is an extension, Identifies the context within FHIR resources where
    the extension can be used.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'contextType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contextType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.contextType = valueProvided;
            }
        });

        /**
         * @description Identifies the types of resource or data type elements to which the extension
    can be applied.
         * @property {String[]|undefined}
        */
        Object.defineProperty(this, 'context', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.context,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.context = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description An absolute URI that is the base structure from which this set of constraints
    is derived.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'base', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.base,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.base = valueProvided;
            }
        });

        /**
         * @description A snapshot view is expressed in a stand alone form that can be used and
    interpreted without considering the base StructureDefinition.
         * @property {StructureDefinitionSnapshot|undefined}
        */
        Object.defineProperty(this, 'snapshot', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.snapshot,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let StructureDefinitionSnapshot = require('../backbone_elements/structureDefinitionSnapshot.js');
                this.__data.snapshot = new StructureDefinitionSnapshot(valueProvided);
            }
        });

        /**
         * @description A differential view is expressed relative to the base StructureDefinition - a
    statement of differences that it applies.
         * @property {StructureDefinitionDifferential|undefined}
        */
        Object.defineProperty(this, 'differential', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.differential,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let StructureDefinitionDifferential = require('../backbone_elements/structureDefinitionDifferential.js');
                this.__data.differential = new StructureDefinitionDifferential(valueProvided);
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            display,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            requirements,
            copyright,
            code,
            fhirVersion,
            mapping,
            kind,
            constrainedType,
            abstract,
            contextType,
            context,
            base,
            snapshot,
            differential,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'StructureDefinition',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'StructureDefinition';
    }

    /**
     * @description Creates a blank new resource
     * @returns {StructureDefinition}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri} url,
     * @param {Identifier[]|undefined} [identifier],
     * @param {String|undefined} [version],
     * @param {String} name,
     * @param {String|undefined} [display],
     * @param {code} status,
     * @param {Boolean|undefined} [experimental],
     * @param {String|undefined} [publisher],
     * @param {StructureDefinitionContact[]|undefined} [contact],
     * @param {dateTime|undefined} [date],
     * @param {String|undefined} [description],
     * @param {CodeableConcept[]|undefined} [useContext],
     * @param {String|undefined} [requirements],
     * @param {String|undefined} [copyright],
     * @param {Coding[]|undefined} [code],
     * @param {id|undefined} [fhirVersion],
     * @param {StructureDefinitionMapping[]|undefined} [mapping],
     * @param {code} kind,
     * @param {code|undefined} [constrainedType],
     * @param {Boolean} abstract,
     * @param {code|undefined} [contextType],
     * @param {String[]|undefined} [context],
     * @param {uri|undefined} [base],
     * @param {StructureDefinitionSnapshot|undefined} [snapshot],
     * @param {StructureDefinitionDifferential|undefined} [differential],
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            display,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            requirements,
            copyright,
            code,
            fhirVersion,
            mapping,
            kind,
            constrainedType,
            abstract,
            contextType,
            context,
            base,
            snapshot,
            differential,
        }
    ) {
        return new StructureDefinition({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            identifier,
            version,
            name,
            display,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            requirements,
            copyright,
            code,
            fhirVersion,
            mapping,
            kind,
            constrainedType,
            abstract,
            contextType,
            context,
            base,
            snapshot,
            differential,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {StructureDefinition}
    */
    copy() {
        return new StructureDefinition(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            version: this.version,
            name: this.name,
            display: this.display,
            status: this.status,
            experimental: this.experimental,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            date: this.date,
            description: this.description,
            useContext: this.useContext && this.useContext.map(v => v.toJSON()),
            requirements: this.requirements,
            copyright: this.copyright,
            code: this.code && this.code.map(v => v.toJSON()),
            fhirVersion: this.fhirVersion,
            mapping: this.mapping && this.mapping.map(v => v.toJSON()),
            kind: this.kind,
            constrainedType: this.constrainedType,
            abstract: this.abstract,
            contextType: this.contextType,
            context: this.context,
            base: this.base,
            snapshot: this.snapshot && this.snapshot.toJSON(),
            differential: this.differential && this.differential.toJSON(),
        });
    }
}

module.exports = StructureDefinition;
