from typing import Union, List, Optional

from pyspark.sql.types import StructType, StructField, StringType, DataType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class ProcedureSchema:
    """
    An action that is or was performed on a patient. This can be a physical
    intervention like an operation, or less invasive like counseling or
    hypnotherapy.
    If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
        extension_fields: Optional[List[str]] = [
            "valueBoolean",
            "valueCode",
            "valueDate",
            "valueDateTime",
            "valueDecimal",
            "valueId",
            "valueInteger",
            "valuePositiveInt",
            "valueString",
            "valueTime",
            "valueUnsignedInt",
            "valueUri",
            "valueQuantity",
        ],
        extension_depth: int = 0,
        max_extension_depth: Optional[int] = 2,
    ) -> Union[StructType, DataType]:
        """
        An action that is or was performed on a patient. This can be a physical
        intervention like an operation, or less invasive like counseling or
        hypnotherapy.
        If the element is present, it must have either a @value, an @id, or extensions


            id: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content may not always be associated with
        version changes to the resource.
            implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content.
            language: The base language in which the resource is written.
            text: A human-readable narrative that contains a summary of the resource, and may be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            extension: May be used to represent additional information that is not part of the basic
        definition of the resource. In order to make the use of extensions safe and
        manageable, there is a strict set of governance  applied to the definition and
        use of extensions. Though any implementer is allowed to define an extension,
        there is a set of requirements that SHALL be met as part of the definition of
        the extension.
            modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource, and that modifies the understanding of the element
        that contains it. Usually modifier elements provide negation or qualification.
        In order to make the use of extensions safe and manageable, there is a strict
        set of governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.
            identifier: This records identifiers associated with this procedure that are defined by
        business processes and/or used to refer to it when a direct URL reference to
        the resource itself is not appropriate (e.g. in CDA documents, or in written /
        printed documentation).
            subject: The person, animal or group on which the procedure was performed.
            status: A code specifying the state of the procedure. Generally this will be in-
        progress or completed state.
            category: A code that classifies the procedure for searching, sorting and display
        purposes (e.g. "Surgical Procedure").
            code: The specific procedure that is performed. Use text if the exact nature of the
        procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
            notPerformed: Set this to true if the record is saying that the procedure was NOT performed.
            reasonNotPerformed: A code indicating why the procedure was not performed.
            bodySite: Detailed and structured anatomical location information. Multiple locations
        are allowed - e.g. multiple punch biopsies of a lesion.
            reasonCodeableConcept: None
            reasonReference: None
            performer: Limited to 'real' people rather than equipment.
            performedDateTime: None
            performedPeriod: None
            encounter: The encounter during which the procedure was performed.
            location: The location where the procedure actually happened.  E.g. a newborn at home, a
        tracheostomy at a restaurant.
            outcome: The outcome of the procedure - did it resolve reasons for the procedure being
        performed?
            report: This could be a histology result, pathology report, surgical report, etc..
            complication: Any complications that occurred during the procedure, or in the immediate
        post-performance period. These are generally tracked separately from the
        notes, which will typically describe the procedure itself rather than any
        'post procedure' issues.
            followUp: If the procedure required specific follow up - e.g. removal of sutures. The
        followup may be represented as a simple note, or could potentially be more
        complex in which case the CarePlan resource can be used.
            request: A reference to a resource that contains details of the request for this
        procedure.
            notes: Any other notes about the procedure.  E.g. the operative notes.
            focalDevice: A device that is implanted, removed or otherwise manipulated (calibration,
        battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a
        focal portion of the Procedure.
            used: Identifies medications, devices and any other substance used as part of the
        procedure.
        """
        if (
            max_recursion_limit
            and nesting_list.count("Procedure") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # Return at least one field in the struct or Spark throws an error
        # "Datasource does not support writing empty or nested empty schemas"
        return StructType([StructField("id", StringType(), True)])
