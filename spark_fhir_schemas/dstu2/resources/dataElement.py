from typing import Union, List, Optional

from pyspark.sql.types import StructType, StructField, StringType, DataType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class DataElementSchema:
    """
    The formal description of a single piece of information that can be gathered
    and reported.
    If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
        extension_fields: Optional[List[str]] = [
            "valueBoolean",
            "valueCode",
            "valueDate",
            "valueDateTime",
            "valueDecimal",
            "valueId",
            "valueInteger",
            "valuePositiveInt",
            "valueString",
            "valueTime",
            "valueUnsignedInt",
            "valueUri",
            "valueQuantity",
        ],
        extension_depth: int = 0,
        max_extension_depth: Optional[int] = 2,
    ) -> Union[StructType, DataType]:
        """
        The formal description of a single piece of information that can be gathered
        and reported.
        If the element is present, it must have either a @value, an @id, or extensions


            id: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content may not always be associated with
        version changes to the resource.
            implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content.
            language: The base language in which the resource is written.
            text: A human-readable narrative that contains a summary of the resource, and may be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            extension: May be used to represent additional information that is not part of the basic
        definition of the resource. In order to make the use of extensions safe and
        manageable, there is a strict set of governance  applied to the definition and
        use of extensions. Though any implementer is allowed to define an extension,
        there is a set of requirements that SHALL be met as part of the definition of
        the extension.
            modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource, and that modifies the understanding of the element
        that contains it. Usually modifier elements provide negation or qualification.
        In order to make the use of extensions safe and manageable, there is a strict
        set of governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.
            url: An absolute URL that is used to identify this data element when it is
        referenced in a specification, model, design or an instance. This SHALL be a
        URL, SHOULD be globally unique, and SHOULD be an address at which this data
        element is (or will be) published.
            identifier: Formal identifier that is used to identify this data element when it is
        represented in other formats, or referenced in a specification, model, design
        or an instance.
            version: The identifier that is used to identify this version of the data element when
        it is referenced in a StructureDefinition, Questionnaire or instance. This is
        an arbitrary value managed by the definition author manually.
            name: The term used by humans to refer to the data element.  Should ideally be
        unique within the context in which the data element is expected to be used.
            status: The status of the data element.
            experimental: A flag to indicate that this search data element definition is authored for
        testing purposes (or education/evaluation/marketing), and is not intended to
        be used for genuine usage.
            publisher: The name of the individual or organization that published the data element.
            contact: Contacts to assist a user in finding and communicating with the publisher.
            date: The date this version of the data element was published. The date must change
        when the business version changes, if it does, and it must change if the
        status code changes. In addition, it should change when the substantive
        content of the data element  changes.
            useContext: The content was developed with a focus and intent of supporting the contexts
        that are listed. These terms may be used to assist with indexing and searching
        of data element definitions.
            copyright: A copyright statement relating to the definition of the data element.
        Copyright statements are generally legal restrictions on the use and
        publishing of the details of the definition of the data element.
            stringency: Identifies how precise the data element is in its definition.
            mapping: Identifies a specification (other than a terminology) that the elements which
        make up the DataElement have some correspondence with.
            element: Defines the structure, type, allowed values and other constraining
        characteristics of the data element.
        """
        if (
            max_recursion_limit
            and nesting_list.count("DataElement") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # Return at least one field in the struct or Spark throws an error
        # "Datasource does not support writing empty or nested empty schemas"
        return StructType([StructField("id", StringType(), True)])
