from typing import Union, List, Optional

from pyspark.sql.types import StructType, StructField, StringType, DataType


# This file is auto-generated by generate_schema so do not edit manually
# noinspection PyPep8Naming
class MedicationOrderSchema:
    """
    An order for both supply of the medication and the instructions for
    administration of the medication to a patient. The resource is called
    "MedicationOrder" rather than "MedicationPrescription" to generalize the use
    across inpatient and outpatient settings as well as for care plans, etc.
    If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyDefaultArgument
    @staticmethod
    def get_schema(
        max_nesting_depth: Optional[int] = 6,
        nesting_depth: int = 0,
        nesting_list: List[str] = [],
        max_recursion_limit: Optional[int] = 2,
        include_extension: Optional[bool] = False,
        extension_fields: Optional[List[str]] = [
            "valueBoolean",
            "valueCode",
            "valueDate",
            "valueDateTime",
            "valueDecimal",
            "valueId",
            "valueInteger",
            "valuePositiveInt",
            "valueString",
            "valueTime",
            "valueUnsignedInt",
            "valueUri",
            "valueQuantity",
        ],
        extension_depth: int = 0,
        max_extension_depth: Optional[int] = 2,
    ) -> Union[StructType, DataType]:
        """
        An order for both supply of the medication and the instructions for
        administration of the medication to a patient. The resource is called
        "MedicationOrder" rather than "MedicationPrescription" to generalize the use
        across inpatient and outpatient settings as well as for care plans, etc.
        If the element is present, it must have either a @value, an @id, or extensions


            id: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content may not always be associated with
        version changes to the resource.
            implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content.
            language: The base language in which the resource is written.
            text: A human-readable narrative that contains a summary of the resource, and may be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            extension: May be used to represent additional information that is not part of the basic
        definition of the resource. In order to make the use of extensions safe and
        manageable, there is a strict set of governance  applied to the definition and
        use of extensions. Though any implementer is allowed to define an extension,
        there is a set of requirements that SHALL be met as part of the definition of
        the extension.
            modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource, and that modifies the understanding of the element
        that contains it. Usually modifier elements provide negation or qualification.
        In order to make the use of extensions safe and manageable, there is a strict
        set of governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.
            identifier: External identifier - one that would be used by another non-FHIR system - for
        example a re-imbursement system might issue its own id for each prescription
        that is created.  This is particularly important where FHIR only provides part
        of an entire workflow process where records have to be tracked through an
        entire system.
            dateWritten: The date (and perhaps time) when the prescription was written.
            status: A code specifying the state of the order.  Generally this will be active or
        completed state.
            dateEnded: The date (and perhaps time) when the prescription was stopped.
            reasonEnded: The reason why the prescription was stopped, if it was.
            patient: A link to a resource representing the person to whom the medication will be
        given.
            prescriber: The healthcare professional responsible for authorizing the prescription.
            encounter: A link to a resource that identifies the particular occurrence of contact
        between patient and health care provider.
            reasonCodeableConcept: None
            reasonReference: None
            note: Extra information about the prescription that could not be conveyed by the
        other attributes.
            medicationCodeableConcept: None
            medicationReference: None
            dosageInstruction: Indicates how the medication is to be used by the patient.
            dispenseRequest: Indicates the specific details for the dispense or medication supply part of a
        medication order (also known as a Medication Prescription).  Note that this
        information is NOT always sent with the order.  There may be in some settings
        (e.g. hospitals) institutional or system support for completing the dispense
        details in the pharmacy department.
            substitution: Indicates whether or not substitution can or should be part of the dispense.
        In some cases substitution must happen, in other cases substitution must not
        happen, and in others it does not matter. This block explains the prescriber's
        intent. If nothing is specified substitution may be done.
            priorPrescription: A link to a resource representing an earlier order or prescription that this
        order supersedes.
        """
        if (
            max_recursion_limit
            and nesting_list.count("MedicationOrder") >= max_recursion_limit
        ) or (max_nesting_depth and nesting_depth >= max_nesting_depth):
            return StructType([StructField("id", StringType(), True)])
        # Return at least one field in the struct or Spark throws an error
        # "Datasource does not support writing empty or nested empty schemas"
        return StructType([StructField("id", StringType(), True)])
