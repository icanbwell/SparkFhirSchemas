/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
Claim
    A provider issued list of services and products provided, or to be provided,
    to a patient which is provided to an insurer for payment recovery.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Claim extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {code} type,
     * @param {Identifier[]|undefined} [identifier],
     * @param {Coding|undefined} [ruleset],
     * @param {Coding|undefined} [originalRuleset],
     * @param {dateTime|undefined} [created],
     * @param {Reference|undefined} [target],
     * @param {Reference|undefined} [provider],
     * @param {Reference|undefined} [organization],
     * @param {code|undefined} [use],
     * @param {Coding|undefined} [priority],
     * @param {Coding|undefined} [fundsReserve],
     * @param {Reference|undefined} [enterer],
     * @param {Reference|undefined} [facility],
     * @param {Reference|undefined} [prescription],
     * @param {Reference|undefined} [originalPrescription],
     * @param {ClaimPayee|undefined} [payee],
     * @param {Reference|undefined} [referral],
     * @param {ClaimDiagnosis[]|undefined} [diagnosis],
     * @param {Coding[]|undefined} [condition],
     * @param {Reference} patient,
     * @param {ClaimCoverage[]|undefined} [coverage],
     * @param {Coding[]|undefined} [exception],
     * @param {String|undefined} [school],
     * @param {date|undefined} [accident],
     * @param {Coding|undefined} [accidentType],
     * @param {Coding[]|undefined} [interventionException],
     * @param {ClaimItem[]|undefined} [item],
     * @param {Coding[]|undefined} [additionalMaterials],
     * @param {ClaimMissingTeeth[]|undefined} [missingTeeth],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            type,
            identifier,
            ruleset,
            originalRuleset,
            created,
            target,
            provider,
            organization,
            use,
            priority,
            fundsReserve,
            enterer,
            facility,
            prescription,
            originalPrescription,
            payee,
            referral,
            diagnosis,
            condition,
            patient,
            coverage,
            exception,
            school,
            accident,
            accidentType,
            interventionException,
            item,
            additionalMaterials,
            missingTeeth,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content may not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource, and may be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The category of claim this is.
         * @property {code}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.type = valueProvided;
            }
        });

        /**
         * @description The business identifier for the instance: invoice number, claim number, pre-
    determination or pre-authorization number.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The version of the specification on which this instance relies.
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'ruleset', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.ruleset,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.ruleset = new Coding(valueProvided);
            }
        });

        /**
         * @description The version of the specification from which the original instance was created.
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'originalRuleset', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.originalRuleset,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.originalRuleset = new Coding(valueProvided);
            }
        });

        /**
         * @description The date when the enclosed suite of services were performed or completed.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'created', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.created,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.created = valueProvided;
            }
        });

        /**
         * @description Insurer Identifier, typical BIN number (6 digit).
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'target', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.target,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.target = new Reference(valueProvided);
            }
        });

        /**
         * @description The provider which is responsible for the bill, claim pre-determination, pre-
    authorization.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'provider', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.provider,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.provider = new Reference(valueProvided);
            }
        });

        /**
         * @description The organization which is responsible for the bill, claim pre-determination,
    pre-authorization.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'organization', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.organization,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.organization = new Reference(valueProvided);
            }
        });

        /**
         * @description Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-
    determination).
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'use', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.use,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.use = valueProvided;
            }
        });

        /**
         * @description Immediate (stat), best effort (normal), deferred (deferred).
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'priority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.priority,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.priority = new Coding(valueProvided);
            }
        });

        /**
         * @description In the case of a Pre-Determination/Pre-Authorization the provider may request
    that funds in the amount of the expected Benefit be reserved ('Patient' or
    'Provider') to pay for the Benefits determined on the subsequent claim(s).
    'None' explicitly indicates no funds reserving is requested.
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'fundsReserve', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.fundsReserve,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.fundsReserve = new Coding(valueProvided);
            }
        });

        /**
         * @description Person who created the invoice/claim/pre-determination or pre-authorization.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'enterer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.enterer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.enterer = new Reference(valueProvided);
            }
        });

        /**
         * @description Facility where the services were provided.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'facility', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.facility,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.facility = new Reference(valueProvided);
            }
        });

        /**
         * @description Prescription to support the dispensing of Pharmacy or Vision products.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'prescription', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.prescription,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.prescription = new Reference(valueProvided);
            }
        });

        /**
         * @description Original prescription to support the dispensing of pharmacy services,
    medications or products.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'originalPrescription', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.originalPrescription,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.originalPrescription = new Reference(valueProvided);
            }
        });

        /**
         * @description The party to be reimbursed for the services.
         * @property {ClaimPayee|undefined}
        */
        Object.defineProperty(this, 'payee', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.payee,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ClaimPayee = require('../backbone_elements/claimPayee.js');
                this.__data.payee = new ClaimPayee(valueProvided);
            }
        });

        /**
         * @description The referral resource which lists the date, practitioner, reason and other
    supporting information.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'referral', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.referral,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.referral = new Reference(valueProvided);
            }
        });

        /**
         * @description Ordered list of patient diagnosis for which care is sought.
         * @property {ClaimDiagnosis[]|undefined}
        */
        Object.defineProperty(this, 'diagnosis', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.diagnosis,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ClaimDiagnosis = require('../backbone_elements/claimDiagnosis.js');
                this.__data.diagnosis = Array.isArray(valueProvided) ? valueProvided.map(v => new ClaimDiagnosis(v)) : [new ClaimDiagnosis(valueProvided)];
            }
        });

        /**
         * @description List of patient conditions for which care is sought.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'condition', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.condition,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.condition = Array.isArray(valueProvided) ? valueProvided.map(v => new Coding(v)) : [new Coding(valueProvided)];
            }
        });

        /**
         * @description Patient Resource.
         * @property {Reference}
        */
        Object.defineProperty(this, 'patient', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.patient,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patient = new Reference(valueProvided);
            }
        });

        /**
         * @description Financial instrument by which payment information for health care.
         * @property {ClaimCoverage[]|undefined}
        */
        Object.defineProperty(this, 'coverage', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.coverage,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ClaimCoverage = require('../backbone_elements/claimCoverage.js');
                this.__data.coverage = Array.isArray(valueProvided) ? valueProvided.map(v => new ClaimCoverage(v)) : [new ClaimCoverage(valueProvided)];
            }
        });

        /**
         * @description Factors which may influence the applicability of coverage.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'exception', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.exception,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.exception = Array.isArray(valueProvided) ? valueProvided.map(v => new Coding(v)) : [new Coding(valueProvided)];
            }
        });

        /**
         * @description Name of school for over-aged dependents.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'school', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.school,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.school = valueProvided;
            }
        });

        /**
         * @description Date of an accident which these services are addressing.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'accident', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.accident,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.accident = valueProvided;
            }
        });

        /**
         * @description Type of accident: work, auto, etc.
         * @property {Coding|undefined}
        */
        Object.defineProperty(this, 'accidentType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.accidentType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.accidentType = new Coding(valueProvided);
            }
        });

        /**
         * @description A list of intervention and exception codes which may influence the
    adjudication of the claim.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'interventionException', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.interventionException,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.interventionException = Array.isArray(valueProvided) ? valueProvided.map(v => new Coding(v)) : [new Coding(valueProvided)];
            }
        });

        /**
         * @description First tier of goods and services.
         * @property {ClaimItem[]|undefined}
        */
        Object.defineProperty(this, 'item', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.item,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ClaimItem = require('../backbone_elements/claimItem.js');
                this.__data.item = Array.isArray(valueProvided) ? valueProvided.map(v => new ClaimItem(v)) : [new ClaimItem(valueProvided)];
            }
        });

        /**
         * @description Code to indicate that Xrays, images, emails, documents, models or attachments
    are being sent in support of this submission.
         * @property {Coding[]|undefined}
        */
        Object.defineProperty(this, 'additionalMaterials', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.additionalMaterials,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Coding = require('../complex_types/coding.js');
                this.__data.additionalMaterials = Array.isArray(valueProvided) ? valueProvided.map(v => new Coding(v)) : [new Coding(valueProvided)];
            }
        });

        /**
         * @description A list of teeth which would be expected but are not found due to having been
    previously  extracted or for other reasons.
         * @property {ClaimMissingTeeth[]|undefined}
        */
        Object.defineProperty(this, 'missingTeeth', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.missingTeeth,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ClaimMissingTeeth = require('../backbone_elements/claimMissingTeeth.js');
                this.__data.missingTeeth = Array.isArray(valueProvided) ? valueProvided.map(v => new ClaimMissingTeeth(v)) : [new ClaimMissingTeeth(valueProvided)];
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            type,
            identifier,
            ruleset,
            originalRuleset,
            created,
            target,
            provider,
            organization,
            use,
            priority,
            fundsReserve,
            enterer,
            facility,
            prescription,
            originalPrescription,
            payee,
            referral,
            diagnosis,
            condition,
            patient,
            coverage,
            exception,
            school,
            accident,
            accidentType,
            interventionException,
            item,
            additionalMaterials,
            missingTeeth,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Claim',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'Claim';
    }

    /**
     * @description Creates a blank new resource
     * @returns {Claim}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {code} type,
     * @param {Identifier[]|undefined} [identifier],
     * @param {Coding|undefined} [ruleset],
     * @param {Coding|undefined} [originalRuleset],
     * @param {dateTime|undefined} [created],
     * @param {Reference|undefined} [target],
     * @param {Reference|undefined} [provider],
     * @param {Reference|undefined} [organization],
     * @param {code|undefined} [use],
     * @param {Coding|undefined} [priority],
     * @param {Coding|undefined} [fundsReserve],
     * @param {Reference|undefined} [enterer],
     * @param {Reference|undefined} [facility],
     * @param {Reference|undefined} [prescription],
     * @param {Reference|undefined} [originalPrescription],
     * @param {ClaimPayee|undefined} [payee],
     * @param {Reference|undefined} [referral],
     * @param {ClaimDiagnosis[]|undefined} [diagnosis],
     * @param {Coding[]|undefined} [condition],
     * @param {Reference} patient,
     * @param {ClaimCoverage[]|undefined} [coverage],
     * @param {Coding[]|undefined} [exception],
     * @param {String|undefined} [school],
     * @param {date|undefined} [accident],
     * @param {Coding|undefined} [accidentType],
     * @param {Coding[]|undefined} [interventionException],
     * @param {ClaimItem[]|undefined} [item],
     * @param {Coding[]|undefined} [additionalMaterials],
     * @param {ClaimMissingTeeth[]|undefined} [missingTeeth],
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            type,
            identifier,
            ruleset,
            originalRuleset,
            created,
            target,
            provider,
            organization,
            use,
            priority,
            fundsReserve,
            enterer,
            facility,
            prescription,
            originalPrescription,
            payee,
            referral,
            diagnosis,
            condition,
            patient,
            coverage,
            exception,
            school,
            accident,
            accidentType,
            interventionException,
            item,
            additionalMaterials,
            missingTeeth,
        }
    ) {
        return new Claim({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            type,
            identifier,
            ruleset,
            originalRuleset,
            created,
            target,
            provider,
            organization,
            use,
            priority,
            fundsReserve,
            enterer,
            facility,
            prescription,
            originalPrescription,
            payee,
            referral,
            diagnosis,
            condition,
            patient,
            coverage,
            exception,
            school,
            accident,
            accidentType,
            interventionException,
            item,
            additionalMaterials,
            missingTeeth,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {Claim}
    */
    copy() {
        return new Claim(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            type: this.type,
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            ruleset: this.ruleset && this.ruleset.toJSON(),
            originalRuleset: this.originalRuleset && this.originalRuleset.toJSON(),
            created: this.created,
            target: this.target && this.target.toJSON(),
            provider: this.provider && this.provider.toJSON(),
            organization: this.organization && this.organization.toJSON(),
            use: this.use,
            priority: this.priority && this.priority.toJSON(),
            fundsReserve: this.fundsReserve && this.fundsReserve.toJSON(),
            enterer: this.enterer && this.enterer.toJSON(),
            facility: this.facility && this.facility.toJSON(),
            prescription: this.prescription && this.prescription.toJSON(),
            originalPrescription: this.originalPrescription && this.originalPrescription.toJSON(),
            payee: this.payee && this.payee.toJSON(),
            referral: this.referral && this.referral.toJSON(),
            diagnosis: this.diagnosis && this.diagnosis.map(v => v.toJSON()),
            condition: this.condition && this.condition.map(v => v.toJSON()),
            patient: this.patient && this.patient.toJSON(),
            coverage: this.coverage && this.coverage.map(v => v.toJSON()),
            exception: this.exception && this.exception.map(v => v.toJSON()),
            school: this.school,
            accident: this.accident,
            accidentType: this.accidentType && this.accidentType.toJSON(),
            interventionException: this.interventionException && this.interventionException.map(v => v.toJSON()),
            item: this.item && this.item.map(v => v.toJSON()),
            additionalMaterials: this.additionalMaterials && this.additionalMaterials.map(v => v.toJSON()),
            missingTeeth: this.missingTeeth && this.missingTeeth.map(v => v.toJSON()),
        });
    }
}

module.exports = Claim;
