/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
TestScript
    TestScript is a resource that specifies a suite of tests against a FHIR server
    implementation to determine compliance against the FHIR specification.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class TestScript extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri} url,
     * @param {String|undefined} [version],
     * @param {String} name,
     * @param {code} status,
     * @param {Identifier|undefined} [identifier],
     * @param {Boolean|undefined} [experimental],
     * @param {String|undefined} [publisher],
     * @param {TestScriptContact[]|undefined} [contact],
     * @param {dateTime|undefined} [date],
     * @param {String|undefined} [description],
     * @param {CodeableConcept[]|undefined} [useContext],
     * @param {String|undefined} [requirements],
     * @param {String|undefined} [copyright],
     * @param {TestScriptMetadata|undefined} [metadata],
     * @param {Boolean|undefined} [multiserver],
     * @param {TestScriptFixture[]|undefined} [fixture],
     * @param {Reference[]|undefined} [profile],
     * @param {TestScriptVariable[]|undefined} [variable],
     * @param {TestScriptSetup|undefined} [setup],
     * @param {TestScriptTest[]|undefined} [test],
     * @param {TestScriptTeardown|undefined} [teardown],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            identifier,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            requirements,
            copyright,
            metadata,
            multiserver,
            fixture,
            profile,
            variable,
            setup,
            test,
            teardown,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content may not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource, and may be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description An absolute URL that is used to identify this Test Script. This SHALL be a
    URL, SHOULD be globally unique, and SHOULD be an address at which this Test
    Script is (or will be) published.
         * @property {uri}
        */
        Object.defineProperty(this, 'url', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.url,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.url = valueProvided;
            }
        });

        /**
         * @description The identifier that is used to identify this version of the TestScript. This
    is an arbitrary value managed by the TestScript author manually.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.version,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.version = valueProvided;
            }
        });

        /**
         * @description A free text natural language name identifying the TestScript.
         * @property {String}
        */
        Object.defineProperty(this, 'name', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description The status of the TestScript.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description Identifier for the TestScript assigned for external purposes outside the
    context of FHIR.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(valueProvided);
            }
        });

        /**
         * @description This TestScript was authored for testing purposes (or
    education/evaluation/marketing), and is not intended to be used for genuine
    usage.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'experimental', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.experimental,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.experimental = valueProvided;
            }
        });

        /**
         * @description The name of the individual or organization that published the Test Script.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.publisher,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.publisher = valueProvided;
            }
        });

        /**
         * @description Contacts to assist a user in finding and communicating with the publisher.
         * @property {TestScriptContact[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let TestScriptContact = require('../backbone_elements/testScriptContact.js');
                this.__data.contact = Array.isArray(valueProvided) ? valueProvided.map(v => new TestScriptContact(v)) : [new TestScriptContact(valueProvided)];
            }
        });

        /**
         * @description The date this version of the test tcript was published. The date must change
    when the business version changes, if it does, and it must change if the
    status code changes. In addition, it should change when the substantive
    content of the test cases change.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.date,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.date = valueProvided;
            }
        });

        /**
         * @description A free text natural language description of the TestScript and its use.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These terms may be used to assist with indexing and searching
    of Test Scripts.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.useContext,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.useContext = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Explains why this Test Script is needed and why it's been constrained as it
    has.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'requirements', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.requirements,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.requirements = valueProvided;
            }
        });

        /**
         * @description A copyright statement relating to the Test Script and/or its contents.
    Copyright statements are generally legal restrictions on the use and
    publishing of the details of the constraints and mappings.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.copyright,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.copyright = valueProvided;
            }
        });

        /**
         * @description The required capability must exist and are assumed to function correctly on
    the FHIR server being tested.
         * @property {TestScriptMetadata|undefined}
        */
        Object.defineProperty(this, 'metadata', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.metadata,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let TestScriptMetadata = require('../backbone_elements/testScriptMetadata.js');
                this.__data.metadata = new TestScriptMetadata(valueProvided);
            }
        });

        /**
         * @description If the tests apply to more than one FHIR server (e.g. cross-server
    interoperability tests) then multiserver=true. Defaults to false if value is
    unspecified.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'multiserver', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.multiserver,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.multiserver = valueProvided;
            }
        });

        /**
         * @description Fixture in the test script - by reference (uri). All fixtures are required for
    the test script to execute.
         * @property {TestScriptFixture[]|undefined}
        */
        Object.defineProperty(this, 'fixture', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.fixture,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let TestScriptFixture = require('../backbone_elements/testScriptFixture.js');
                this.__data.fixture = Array.isArray(valueProvided) ? valueProvided.map(v => new TestScriptFixture(v)) : [new TestScriptFixture(valueProvided)];
            }
        });

        /**
         * @description Reference to the profile to be used for validation.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'profile', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.profile,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.profile = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Variable is set based either on element value in response body or on header
    field value in the response headers.
         * @property {TestScriptVariable[]|undefined}
        */
        Object.defineProperty(this, 'variable', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.variable,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let TestScriptVariable = require('../backbone_elements/testScriptVariable.js');
                this.__data.variable = Array.isArray(valueProvided) ? valueProvided.map(v => new TestScriptVariable(v)) : [new TestScriptVariable(valueProvided)];
            }
        });

        /**
         * @description A series of required setup operations before tests are executed.
         * @property {TestScriptSetup|undefined}
        */
        Object.defineProperty(this, 'setup', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.setup,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let TestScriptSetup = require('../backbone_elements/testScriptSetup.js');
                this.__data.setup = new TestScriptSetup(valueProvided);
            }
        });

        /**
         * @description A test in this script.
         * @property {TestScriptTest[]|undefined}
        */
        Object.defineProperty(this, 'test', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.test,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let TestScriptTest = require('../backbone_elements/testScriptTest.js');
                this.__data.test = Array.isArray(valueProvided) ? valueProvided.map(v => new TestScriptTest(v)) : [new TestScriptTest(valueProvided)];
            }
        });

        /**
         * @description A series of operations required to clean up after the all the tests are
    executed (successfully or otherwise).
         * @property {TestScriptTeardown|undefined}
        */
        Object.defineProperty(this, 'teardown', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.teardown,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let TestScriptTeardown = require('../backbone_elements/testScriptTeardown.js');
                this.__data.teardown = new TestScriptTeardown(valueProvided);
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            identifier,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            requirements,
            copyright,
            metadata,
            multiserver,
            fixture,
            profile,
            variable,
            setup,
            test,
            teardown,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'TestScript',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'TestScript';
    }

    /**
     * @description Creates a blank new resource
     * @returns {TestScript}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri} url,
     * @param {String|undefined} [version],
     * @param {String} name,
     * @param {code} status,
     * @param {Identifier|undefined} [identifier],
     * @param {Boolean|undefined} [experimental],
     * @param {String|undefined} [publisher],
     * @param {TestScriptContact[]|undefined} [contact],
     * @param {dateTime|undefined} [date],
     * @param {String|undefined} [description],
     * @param {CodeableConcept[]|undefined} [useContext],
     * @param {String|undefined} [requirements],
     * @param {String|undefined} [copyright],
     * @param {TestScriptMetadata|undefined} [metadata],
     * @param {Boolean|undefined} [multiserver],
     * @param {TestScriptFixture[]|undefined} [fixture],
     * @param {Reference[]|undefined} [profile],
     * @param {TestScriptVariable[]|undefined} [variable],
     * @param {TestScriptSetup|undefined} [setup],
     * @param {TestScriptTest[]|undefined} [test],
     * @param {TestScriptTeardown|undefined} [teardown],
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            identifier,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            requirements,
            copyright,
            metadata,
            multiserver,
            fixture,
            profile,
            variable,
            setup,
            test,
            teardown,
        }
    ) {
        return new TestScript({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            identifier,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            requirements,
            copyright,
            metadata,
            multiserver,
            fixture,
            profile,
            variable,
            setup,
            test,
            teardown,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {TestScript}
    */
    copy() {
        return new TestScript(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            version: this.version,
            name: this.name,
            status: this.status,
            identifier: this.identifier && this.identifier.toJSON(),
            experimental: this.experimental,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            date: this.date,
            description: this.description,
            useContext: this.useContext && this.useContext.map(v => v.toJSON()),
            requirements: this.requirements,
            copyright: this.copyright,
            metadata: this.metadata && this.metadata.toJSON(),
            multiserver: this.multiserver,
            fixture: this.fixture && this.fixture.map(v => v.toJSON()),
            profile: this.profile && this.profile.map(v => v.toJSON()),
            variable: this.variable && this.variable.map(v => v.toJSON()),
            setup: this.setup && this.setup.toJSON(),
            test: this.test && this.test.map(v => v.toJSON()),
            teardown: this.teardown && this.teardown.toJSON(),
        });
    }
}

module.exports = TestScript;
