/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
Contract
    A formal agreement between parties regarding the conduct of business, exchange
    of information or other matters.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Contract extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier|undefined} [identifier],
     * @param {dateTime|undefined} [issued],
     * @param {Period|undefined} [applies],
     * @param {Reference[]|undefined} [subject],
     * @param {Reference[]|undefined} [authority],
     * @param {Reference[]|undefined} [domain],
     * @param {CodeableConcept|undefined} [type],
     * @param {CodeableConcept[]|undefined} [subType],
     * @param {CodeableConcept[]|undefined} [action],
     * @param {CodeableConcept[]|undefined} [actionReason],
     * @param {ContractActor[]|undefined} [actor],
     * @param {ContractValuedItem[]|undefined} [valuedItem],
     * @param {ContractSigner[]|undefined} [signer],
     * @param {ContractTerm[]|undefined} [term],
     * @param {Attachment|undefined} [bindingAttachment],
     * @param {Reference|undefined} [bindingReference],
     * @param {ContractFriendly[]|undefined} [friendly],
     * @param {ContractLegal[]|undefined} [legal],
     * @param {ContractRule[]|undefined} [rule],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            issued,
            applies,
            subject,
            authority,
            domain,
            type,
            subType,
            action,
            actionReason,
            actor,
            valuedItem,
            signer,
            term,
            bindingAttachment,
            bindingReference,
            friendly,
            legal,
            rule,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content may not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource, and may be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Unique identifier for this Contract.
         * @property {Identifier|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = new Identifier(valueProvided);
            }
        });

        /**
         * @description When this  Contract was issued.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'issued', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.issued,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.issued = valueProvided;
            }
        });

        /**
         * @description Relevant time or time-period when this Contract is applicable.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'applies', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.applies,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.applies = new Period(valueProvided);
            }
        });

        /**
         * @description Who and/or what this Contract is about: typically a Patient, Organization, or
    valued items such as goods and services.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'subject', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subject,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.subject = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description A formally or informally recognized grouping of people, principals,
    organizations, or jurisdictions formed for the purpose of achieving some form
    of collective action such as the promulgation, administration and enforcement
    of contracts and policies.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'authority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.authority,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.authority = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Recognized governance framework or system operating with a circumscribed scope
    in accordance with specified principles, policies, processes or procedures for
    managing rights, actions, or behaviors of parties or principals relative to
    resources.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'domain', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.domain,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.domain = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Type of Contract such as an insurance policy, real estate contract, a will,
    power of attorny, Privacy or Security policy , trust framework agreement, etc.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description More specific type or specialization of an overarching or more general
    contract such as auto insurance, home owner  insurance, prenupial agreement,
    Advanced-Directive, or privacy consent.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'subType', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.subType,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.subType = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Action stipulated by this Contract.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'action', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.action,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.action = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Reason for action stipulated by this Contract.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'actionReason', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.actionReason,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.actionReason = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description List of Contract actors.
         * @property {ContractActor[]|undefined}
        */
        Object.defineProperty(this, 'actor', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.actor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ContractActor = require('../backbone_elements/contractActor.js');
                this.__data.actor = Array.isArray(valueProvided) ? valueProvided.map(v => new ContractActor(v)) : [new ContractActor(valueProvided)];
            }
        });

        /**
         * @description Contract Valued Item List.
         * @property {ContractValuedItem[]|undefined}
        */
        Object.defineProperty(this, 'valuedItem', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.valuedItem,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ContractValuedItem = require('../backbone_elements/contractValuedItem.js');
                this.__data.valuedItem = Array.isArray(valueProvided) ? valueProvided.map(v => new ContractValuedItem(v)) : [new ContractValuedItem(valueProvided)];
            }
        });

        /**
         * @description Party signing this Contract.
         * @property {ContractSigner[]|undefined}
        */
        Object.defineProperty(this, 'signer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.signer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ContractSigner = require('../backbone_elements/contractSigner.js');
                this.__data.signer = Array.isArray(valueProvided) ? valueProvided.map(v => new ContractSigner(v)) : [new ContractSigner(valueProvided)];
            }
        });

        /**
         * @description One or more Contract Provisions, which may be related and conveyed as a group,
    and may contain nested groups.
         * @property {ContractTerm[]|undefined}
        */
        Object.defineProperty(this, 'term', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.term,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ContractTerm = require('../backbone_elements/contractTerm.js');
                this.__data.term = Array.isArray(valueProvided) ? valueProvided.map(v => new ContractTerm(v)) : [new ContractTerm(valueProvided)];
            }
        });

        /**
         * @description None
         * @property {Attachment|undefined}
        */
        Object.defineProperty(this, 'bindingAttachment', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.bindingAttachment,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Attachment = require('../complex_types/attachment.js');
                this.__data.bindingAttachment = new Attachment(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'bindingReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.bindingReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.bindingReference = new Reference(valueProvided);
            }
        });

        /**
         * @description The "patient friendly language" versionof the Contract in whole or in parts.
    "Patient friendly language" means the representation of the Contract and
    Contract Provisions in a manner that is readily accessible and understandable
    by a layperson in accordance with best practices for communication styles that
    ensure that those agreeing to or signing the Contract understand the roles,
    actions, obligations, responsibilities, and implication of the agreement.
         * @property {ContractFriendly[]|undefined}
        */
        Object.defineProperty(this, 'friendly', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.friendly,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ContractFriendly = require('../backbone_elements/contractFriendly.js');
                this.__data.friendly = Array.isArray(valueProvided) ? valueProvided.map(v => new ContractFriendly(v)) : [new ContractFriendly(valueProvided)];
            }
        });

        /**
         * @description List of Legal expressions or representations of this Contract.
         * @property {ContractLegal[]|undefined}
        */
        Object.defineProperty(this, 'legal', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.legal,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ContractLegal = require('../backbone_elements/contractLegal.js');
                this.__data.legal = Array.isArray(valueProvided) ? valueProvided.map(v => new ContractLegal(v)) : [new ContractLegal(valueProvided)];
            }
        });

        /**
         * @description List of Computable Policy Rule Language Representations of this Contract.
         * @property {ContractRule[]|undefined}
        */
        Object.defineProperty(this, 'rule', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.rule,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ContractRule = require('../backbone_elements/contractRule.js');
                this.__data.rule = Array.isArray(valueProvided) ? valueProvided.map(v => new ContractRule(v)) : [new ContractRule(valueProvided)];
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            issued,
            applies,
            subject,
            authority,
            domain,
            type,
            subType,
            action,
            actionReason,
            actor,
            valuedItem,
            signer,
            term,
            bindingAttachment,
            bindingReference,
            friendly,
            legal,
            rule,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Contract',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'Contract';
    }

    /**
     * @description Creates a blank new resource
     * @returns {Contract}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier|undefined} [identifier],
     * @param {dateTime|undefined} [issued],
     * @param {Period|undefined} [applies],
     * @param {Reference[]|undefined} [subject],
     * @param {Reference[]|undefined} [authority],
     * @param {Reference[]|undefined} [domain],
     * @param {CodeableConcept|undefined} [type],
     * @param {CodeableConcept[]|undefined} [subType],
     * @param {CodeableConcept[]|undefined} [action],
     * @param {CodeableConcept[]|undefined} [actionReason],
     * @param {ContractActor[]|undefined} [actor],
     * @param {ContractValuedItem[]|undefined} [valuedItem],
     * @param {ContractSigner[]|undefined} [signer],
     * @param {ContractTerm[]|undefined} [term],
     * @param {Attachment|undefined} [bindingAttachment],
     * @param {Reference|undefined} [bindingReference],
     * @param {ContractFriendly[]|undefined} [friendly],
     * @param {ContractLegal[]|undefined} [legal],
     * @param {ContractRule[]|undefined} [rule],
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            issued,
            applies,
            subject,
            authority,
            domain,
            type,
            subType,
            action,
            actionReason,
            actor,
            valuedItem,
            signer,
            term,
            bindingAttachment,
            bindingReference,
            friendly,
            legal,
            rule,
        }
    ) {
        return new Contract({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            issued,
            applies,
            subject,
            authority,
            domain,
            type,
            subType,
            action,
            actionReason,
            actor,
            valuedItem,
            signer,
            term,
            bindingAttachment,
            bindingReference,
            friendly,
            legal,
            rule,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {Contract}
    */
    copy() {
        return new Contract(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.toJSON(),
            issued: this.issued,
            applies: this.applies && this.applies.toJSON(),
            subject: this.subject && this.subject.map(v => v.toJSON()),
            authority: this.authority && this.authority.map(v => v.toJSON()),
            domain: this.domain && this.domain.map(v => v.toJSON()),
            type: this.type && this.type.toJSON(),
            subType: this.subType && this.subType.map(v => v.toJSON()),
            action: this.action && this.action.map(v => v.toJSON()),
            actionReason: this.actionReason && this.actionReason.map(v => v.toJSON()),
            actor: this.actor && this.actor.map(v => v.toJSON()),
            valuedItem: this.valuedItem && this.valuedItem.map(v => v.toJSON()),
            signer: this.signer && this.signer.map(v => v.toJSON()),
            term: this.term && this.term.map(v => v.toJSON()),
            bindingAttachment: this.bindingAttachment && this.bindingAttachment.toJSON(),
            bindingReference: this.bindingReference && this.bindingReference.toJSON(),
            friendly: this.friendly && this.friendly.map(v => v.toJSON()),
            legal: this.legal && this.legal.map(v => v.toJSON()),
            rule: this.rule && this.rule.map(v => v.toJSON()),
        });
    }
}

module.exports = Contract;
