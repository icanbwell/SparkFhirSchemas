/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
ImplementationGuide
    A set of rules or how FHIR is used to solve a particular problem. This
    resource is used to gather all the parts of an implementation guide into a
    logical whole, and to publish a computable definition of all the parts.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class ImplementationGuide extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri} url,
     * @param {String|undefined} [version],
     * @param {String} name,
     * @param {code} status,
     * @param {Boolean|undefined} [experimental],
     * @param {String|undefined} [publisher],
     * @param {ImplementationGuideContact[]|undefined} [contact],
     * @param {dateTime|undefined} [date],
     * @param {String|undefined} [description],
     * @param {CodeableConcept[]|undefined} [useContext],
     * @param {String|undefined} [copyright],
     * @param {id|undefined} [fhirVersion],
     * @param {ImplementationGuideDependency[]|undefined} [dependency],
     * @param {ImplementationGuidePackage[]} package,
     * @param {ImplementationGuideGlobal[]|undefined} [global],
     * @param {uri[]|undefined} [binary],
     * @param {ImplementationGuidePage} page,
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            copyright,
            fhirVersion,
            dependency,
            package,
            global,
            binary,
            page,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content may not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource, and may be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description An absolute URL that is used to identify this implementation guide when it is
    referenced in a specification, model, design or an instance. This SHALL be a
    URL, SHOULD be globally unique, and SHOULD be an address at which this
    implementation guide is (or will be) published.
         * @property {uri}
        */
        Object.defineProperty(this, 'url', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.url,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.url = valueProvided;
            }
        });

        /**
         * @description The identifier that is used to identify this version of the Implementation
    Guide when it is referenced in a specification, model, design or instance.
    This is an arbitrary value managed by the Implementation Guide author
    manually.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.version,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.version = valueProvided;
            }
        });

        /**
         * @description A free text natural language name identifying the Implementation Guide.
         * @property {String}
        */
        Object.defineProperty(this, 'name', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description The status of the Implementation Guide.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description This Implementation Guide was authored for testing purposes (or
    education/evaluation/marketing), and is not intended to be used for genuine
    usage.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'experimental', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.experimental,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.experimental = valueProvided;
            }
        });

        /**
         * @description The name of the individual or organization that published the implementation
    guide.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.publisher,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.publisher = valueProvided;
            }
        });

        /**
         * @description Contacts to assist a user in finding and communicating with the publisher.
         * @property {ImplementationGuideContact[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ImplementationGuideContact = require('../backbone_elements/implementationGuideContact.js');
                this.__data.contact = Array.isArray(valueProvided) ? valueProvided.map(v => new ImplementationGuideContact(v)) : [new ImplementationGuideContact(valueProvided)];
            }
        });

        /**
         * @description The date this version of the implementation guide was published. The date must
    change when the business version changes, if it does, and it must change if
    the status code changes. In addition, it should change when the substantive
    content of the implementation guide changes.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.date,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.date = valueProvided;
            }
        });

        /**
         * @description A free text natural language description of the Implementation Guide and its
    use.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description The content was developed with a focus and intent of supporting the contexts
    that are listed. These terms may be used to assist with indexing and searching
    of implementation guides. The most common use of this element is to represent
    the country / jurisdiction for which this implementation guide was defined.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'useContext', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.useContext,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.useContext = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description A copyright statement relating to the implementation guide and/or its
    contents. Copyright statements are generally legal restrictions on the use and
    publishing of the details of the constraints and mappings.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.copyright,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.copyright = valueProvided;
            }
        });

        /**
         * @description The version of the FHIR specification on which this ImplementationGuide is
    based - this is the formal version of the specification, without the revision
    number, e.g. [publication].[major].[minor], which is 1.0.2 for this version.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'fhirVersion', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.fhirVersion,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.fhirVersion = valueProvided;
            }
        });

        /**
         * @description Another implementation guide that this implementation depends on. Typically,
    an implementation guide uses value sets, profiles etc.defined in other
    implementation guides.
         * @property {ImplementationGuideDependency[]|undefined}
        */
        Object.defineProperty(this, 'dependency', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dependency,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ImplementationGuideDependency = require('../backbone_elements/implementationGuideDependency.js');
                this.__data.dependency = Array.isArray(valueProvided) ? valueProvided.map(v => new ImplementationGuideDependency(v)) : [new ImplementationGuideDependency(valueProvided)];
            }
        });

        /**
         * @description A logical group of resources. Logical groups can be used when building pages.
         * @property {ImplementationGuidePackage[]}
        */
        Object.defineProperty(this, 'package', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.package,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ImplementationGuidePackage = require('../backbone_elements/implementationGuidePackage.js');
                this.__data.package = Array.isArray(valueProvided) ? valueProvided.map(v => new ImplementationGuidePackage(v)) : [new ImplementationGuidePackage(valueProvided)];
            }
        });

        /**
         * @description A set of profiles that all resources covered by this implementation guide must
    conform to.
         * @property {ImplementationGuideGlobal[]|undefined}
        */
        Object.defineProperty(this, 'global', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.global,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ImplementationGuideGlobal = require('../backbone_elements/implementationGuideGlobal.js');
                this.__data.global = Array.isArray(valueProvided) ? valueProvided.map(v => new ImplementationGuideGlobal(v)) : [new ImplementationGuideGlobal(valueProvided)];
            }
        });

        /**
         * @description A binary file that is included in the  implementation guide when it is
    published.
         * @property {uri[]|undefined}
        */
        Object.defineProperty(this, 'binary', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.binary,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.binary = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description A page / section in the implementation guide. The root page is the
    implementation guide home page.
         * @property {ImplementationGuidePage}
        */
        Object.defineProperty(this, 'page', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.page,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ImplementationGuidePage = require('../backbone_elements/implementationGuidePage.js');
                this.__data.page = new ImplementationGuidePage(valueProvided);
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            copyright,
            fhirVersion,
            dependency,
            package,
            global,
            binary,
            page,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ImplementationGuide',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'ImplementationGuide';
    }

    /**
     * @description Creates a blank new resource
     * @returns {ImplementationGuide}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri} url,
     * @param {String|undefined} [version],
     * @param {String} name,
     * @param {code} status,
     * @param {Boolean|undefined} [experimental],
     * @param {String|undefined} [publisher],
     * @param {ImplementationGuideContact[]|undefined} [contact],
     * @param {dateTime|undefined} [date],
     * @param {String|undefined} [description],
     * @param {CodeableConcept[]|undefined} [useContext],
     * @param {String|undefined} [copyright],
     * @param {id|undefined} [fhirVersion],
     * @param {ImplementationGuideDependency[]|undefined} [dependency],
     * @param {ImplementationGuidePackage[]} package,
     * @param {ImplementationGuideGlobal[]|undefined} [global],
     * @param {uri[]|undefined} [binary],
     * @param {ImplementationGuidePage} page,
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            copyright,
            fhirVersion,
            dependency,
            package,
            global,
            binary,
            page,
        }
    ) {
        return new ImplementationGuide({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            useContext,
            copyright,
            fhirVersion,
            dependency,
            package,
            global,
            binary,
            page,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {ImplementationGuide}
    */
    copy() {
        return new ImplementationGuide(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            version: this.version,
            name: this.name,
            status: this.status,
            experimental: this.experimental,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            date: this.date,
            description: this.description,
            useContext: this.useContext && this.useContext.map(v => v.toJSON()),
            copyright: this.copyright,
            fhirVersion: this.fhirVersion,
            dependency: this.dependency && this.dependency.map(v => v.toJSON()),
            package: this.package && this.package.map(v => v.toJSON()),
            global: this.global && this.global.map(v => v.toJSON()),
            binary: this.binary,
            page: this.page && this.page.toJSON(),
        });
    }
}

module.exports = ImplementationGuide;
