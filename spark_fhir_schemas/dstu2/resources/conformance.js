/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
Conformance
    A conformance statement is a set of capabilities of a FHIR Server that may be
    used as a statement of actual server functionality or a statement of required
    or desired server implementation.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Conformance extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri|undefined} [url],
     * @param {String|undefined} [version],
     * @param {String|undefined} [name],
     * @param {code|undefined} [status],
     * @param {Boolean|undefined} [experimental],
     * @param {String|undefined} [publisher],
     * @param {ConformanceContact[]|undefined} [contact],
     * @param {dateTime} date,
     * @param {String|undefined} [description],
     * @param {String|undefined} [requirements],
     * @param {String|undefined} [copyright],
     * @param {code} kind,
     * @param {ConformanceSoftware|undefined} [software],
     * @param {ConformanceImplementation|undefined} [implementation],
     * @param {id} fhirVersion,
     * @param {code} acceptUnknown,
     * @param {code[]} format,
     * @param {Reference[]|undefined} [profile],
     * @param {ConformanceRest[]|undefined} [rest],
     * @param {ConformanceMessaging[]|undefined} [messaging],
     * @param {ConformanceDocument[]|undefined} [document],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            requirements,
            copyright,
            kind,
            software,
            implementation,
            fhirVersion,
            acceptUnknown,
            format,
            profile,
            rest,
            messaging,
            document,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content may not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource, and may be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description An absolute URL that is used to identify this conformance statement when it is
    referenced in a specification, model, design or an instance. This SHALL be a
    URL, SHOULD be globally unique, and SHOULD be an address at which this
    conformance statement is (or will be) published.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'url', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.url,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.url = valueProvided;
            }
        });

        /**
         * @description The identifier that is used to identify this version of the conformance
    statement when it is referenced in a specification, model, design or instance.
    This is an arbitrary value managed by the profile author manually and the
    value should be a timestamp.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'version', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.version,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.version = valueProvided;
            }
        });

        /**
         * @description A free text natural language name identifying the conformance statement.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'name', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.name,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.name = valueProvided;
            }
        });

        /**
         * @description The status of this conformance statement.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description A flag to indicate that this conformance statement is authored for testing
    purposes (or education/evaluation/marketing), and is not intended to be used
    for genuine usage.
         * @property {Boolean|undefined}
        */
        Object.defineProperty(this, 'experimental', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.experimental,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.experimental = valueProvided;
            }
        });

        /**
         * @description The name of the individual or organization that published the conformance.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'publisher', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.publisher,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.publisher = valueProvided;
            }
        });

        /**
         * @description Contacts to assist a user in finding and communicating with the publisher.
         * @property {ConformanceContact[]|undefined}
        */
        Object.defineProperty(this, 'contact', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contact,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ConformanceContact = require('../backbone_elements/conformanceContact.js');
                this.__data.contact = Array.isArray(valueProvided) ? valueProvided.map(v => new ConformanceContact(v)) : [new ConformanceContact(valueProvided)];
            }
        });

        /**
         * @description The date  (and optionally time) when the conformance statement was published.
    The date must change when the business version changes, if it does, and it
    must change if the status code changes. In addition, it should change when the
    substantive content of the conformance statement changes.
         * @property {dateTime}
        */
        Object.defineProperty(this, 'date', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.date,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.date = valueProvided;
            }
        });

        /**
         * @description A free text natural language description of the conformance statement and its
    use. Typically, this is used when the conformance statement describes a
    desired rather than an actual solution, for example as a formal expression of
    requirements as part of an RFP.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description Explains why this conformance statement is needed and why it's been
    constrained as it has.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'requirements', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.requirements,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.requirements = valueProvided;
            }
        });

        /**
         * @description A copyright statement relating to the conformance statement and/or its
    contents. Copyright statements are generally legal restrictions on the use and
    publishing of the details of the system described by the conformance
    statement.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'copyright', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.copyright,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.copyright = valueProvided;
            }
        });

        /**
         * @description The way that this statement is intended to be used, to describe an actual
    running instance of software, a particular product (kind not instance of
    software) or a class of implementation (e.g. a desired purchase).
         * @property {code}
        */
        Object.defineProperty(this, 'kind', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.kind,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.kind = valueProvided;
            }
        });

        /**
         * @description Software that is covered by this conformance statement.  It is used when the
    conformance statement describes the capabilities of a particular software
    version, independent of an installation.
         * @property {ConformanceSoftware|undefined}
        */
        Object.defineProperty(this, 'software', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.software,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ConformanceSoftware = require('../backbone_elements/conformanceSoftware.js');
                this.__data.software = new ConformanceSoftware(valueProvided);
            }
        });

        /**
         * @description Identifies a specific implementation instance that is described by the
    conformance statement - i.e. a particular installation, rather than the
    capabilities of a software program.
         * @property {ConformanceImplementation|undefined}
        */
        Object.defineProperty(this, 'implementation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implementation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ConformanceImplementation = require('../backbone_elements/conformanceImplementation.js');
                this.__data.implementation = new ConformanceImplementation(valueProvided);
            }
        });

        /**
         * @description The version of the FHIR specification on which this conformance statement is
    based.
         * @property {id}
        */
        Object.defineProperty(this, 'fhirVersion', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.fhirVersion,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.fhirVersion = valueProvided;
            }
        });

        /**
         * @description A code that indicates whether the application accepts unknown elements or
    extensions when reading resources.
         * @property {code}
        */
        Object.defineProperty(this, 'acceptUnknown', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.acceptUnknown,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.acceptUnknown = valueProvided;
            }
        });

        /**
         * @description A list of the formats supported by this implementation using their content
    types.
         * @property {code[]}
        */
        Object.defineProperty(this, 'format', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.format,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.format = Array.isArray(valueProvided) ? valueProvided.map(v => v) : [valueProvided];
            }
        });

        /**
         * @description A list of profiles that represent different use cases supported by the system.
    For a server, "supported by the system" means the system hosts/produces a set
    of resources that are conformant to a particular profile, and allows clients
    that use its services to search using this profile and to find appropriate
    data. For a client, it means the system will search by this profile and
    process data according to the guidance implicit in the profile. See further
    discussion in [Using Profiles]{profiling.html#profile-uses}.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'profile', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.profile,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.profile = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description A definition of the restful capabilities of the solution, if any.
         * @property {ConformanceRest[]|undefined}
        */
        Object.defineProperty(this, 'rest', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.rest,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ConformanceRest = require('../backbone_elements/conformanceRest.js');
                this.__data.rest = Array.isArray(valueProvided) ? valueProvided.map(v => new ConformanceRest(v)) : [new ConformanceRest(valueProvided)];
            }
        });

        /**
         * @description A description of the messaging capabilities of the solution.
         * @property {ConformanceMessaging[]|undefined}
        */
        Object.defineProperty(this, 'messaging', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.messaging,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ConformanceMessaging = require('../backbone_elements/conformanceMessaging.js');
                this.__data.messaging = Array.isArray(valueProvided) ? valueProvided.map(v => new ConformanceMessaging(v)) : [new ConformanceMessaging(valueProvided)];
            }
        });

        /**
         * @description A document definition.
         * @property {ConformanceDocument[]|undefined}
        */
        Object.defineProperty(this, 'document', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.document,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ConformanceDocument = require('../backbone_elements/conformanceDocument.js');
                this.__data.document = Array.isArray(valueProvided) ? valueProvided.map(v => new ConformanceDocument(v)) : [new ConformanceDocument(valueProvided)];
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            requirements,
            copyright,
            kind,
            software,
            implementation,
            fhirVersion,
            acceptUnknown,
            format,
            profile,
            rest,
            messaging,
            document,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Conformance',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'Conformance';
    }

    /**
     * @description Creates a blank new resource
     * @returns {Conformance}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {uri|undefined} [url],
     * @param {String|undefined} [version],
     * @param {String|undefined} [name],
     * @param {code|undefined} [status],
     * @param {Boolean|undefined} [experimental],
     * @param {String|undefined} [publisher],
     * @param {ConformanceContact[]|undefined} [contact],
     * @param {dateTime} date,
     * @param {String|undefined} [description],
     * @param {String|undefined} [requirements],
     * @param {String|undefined} [copyright],
     * @param {code} kind,
     * @param {ConformanceSoftware|undefined} [software],
     * @param {ConformanceImplementation|undefined} [implementation],
     * @param {id} fhirVersion,
     * @param {code} acceptUnknown,
     * @param {code[]} format,
     * @param {Reference[]|undefined} [profile],
     * @param {ConformanceRest[]|undefined} [rest],
     * @param {ConformanceMessaging[]|undefined} [messaging],
     * @param {ConformanceDocument[]|undefined} [document],
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            requirements,
            copyright,
            kind,
            software,
            implementation,
            fhirVersion,
            acceptUnknown,
            format,
            profile,
            rest,
            messaging,
            document,
        }
    ) {
        return new Conformance({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            url,
            version,
            name,
            status,
            experimental,
            publisher,
            contact,
            date,
            description,
            requirements,
            copyright,
            kind,
            software,
            implementation,
            fhirVersion,
            acceptUnknown,
            format,
            profile,
            rest,
            messaging,
            document,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {Conformance}
    */
    copy() {
        return new Conformance(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            url: this.url,
            version: this.version,
            name: this.name,
            status: this.status,
            experimental: this.experimental,
            publisher: this.publisher,
            contact: this.contact && this.contact.map(v => v.toJSON()),
            date: this.date,
            description: this.description,
            requirements: this.requirements,
            copyright: this.copyright,
            kind: this.kind,
            software: this.software && this.software.toJSON(),
            implementation: this.implementation && this.implementation.toJSON(),
            fhirVersion: this.fhirVersion,
            acceptUnknown: this.acceptUnknown,
            format: this.format,
            profile: this.profile && this.profile.map(v => v.toJSON()),
            rest: this.rest && this.rest.map(v => v.toJSON()),
            messaging: this.messaging && this.messaging.map(v => v.toJSON()),
            document: this.document && this.document.map(v => v.toJSON()),
        });
    }
}

module.exports = Conformance;
