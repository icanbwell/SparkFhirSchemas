/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
MedicationOrder
    An order for both supply of the medication and the instructions for
    administration of the medication to a patient. The resource is called
    "MedicationOrder" rather than "MedicationPrescription" to generalize the use
    across inpatient and outpatient settings as well as for care plans, etc.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class MedicationOrder extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {dateTime|undefined} [dateWritten],
     * @param {code|undefined} [status],
     * @param {dateTime|undefined} [dateEnded],
     * @param {CodeableConcept|undefined} [reasonEnded],
     * @param {Reference|undefined} [patient],
     * @param {Reference|undefined} [prescriber],
     * @param {Reference|undefined} [encounter],
     * @param {CodeableConcept|undefined} [reasonCodeableConcept],
     * @param {Reference|undefined} [reasonReference],
     * @param {String|undefined} [note],
     * @param {CodeableConcept|undefined} [medicationCodeableConcept],
     * @param {Reference|undefined} [medicationReference],
     * @param {MedicationOrderDosageInstruction[]|undefined} [dosageInstruction],
     * @param {MedicationOrderDispenseRequest|undefined} [dispenseRequest],
     * @param {MedicationOrderSubstitution|undefined} [substitution],
     * @param {Reference|undefined} [priorPrescription],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            dateWritten,
            status,
            dateEnded,
            reasonEnded,
            patient,
            prescriber,
            encounter,
            reasonCodeableConcept,
            reasonReference,
            note,
            medicationCodeableConcept,
            medicationReference,
            dosageInstruction,
            dispenseRequest,
            substitution,
            priorPrescription,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content may not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource, and may be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description External identifier - one that would be used by another non-FHIR system - for
    example a re-imbursement system might issue its own id for each prescription
    that is created.  This is particularly important where FHIR only provides part
    of an entire workflow process where records have to be tracked through an
    entire system.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description The date (and perhaps time) when the prescription was written.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'dateWritten', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dateWritten,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.dateWritten = valueProvided;
            }
        });

        /**
         * @description A code specifying the state of the order.  Generally this will be active or
    completed state.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description The date (and perhaps time) when the prescription was stopped.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'dateEnded', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dateEnded,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.dateEnded = valueProvided;
            }
        });

        /**
         * @description The reason why the prescription was stopped, if it was.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'reasonEnded', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reasonEnded,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reasonEnded = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description A link to a resource representing the person to whom the medication will be
    given.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'patient', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.patient,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patient = new Reference(valueProvided);
            }
        });

        /**
         * @description The healthcare professional responsible for authorizing the prescription.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'prescriber', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.prescriber,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.prescriber = new Reference(valueProvided);
            }
        });

        /**
         * @description A link to a resource that identifies the particular occurrence of contact
    between patient and health care provider.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.encounter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(valueProvided);
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'reasonCodeableConcept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reasonCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reasonCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'reasonReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reasonReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.reasonReference = new Reference(valueProvided);
            }
        });

        /**
         * @description Extra information about the prescription that could not be conveyed by the
    other attributes.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.note = valueProvided;
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'medicationCodeableConcept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.medicationCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.medicationCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'medicationReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.medicationReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.medicationReference = new Reference(valueProvided);
            }
        });

        /**
         * @description Indicates how the medication is to be used by the patient.
         * @property {MedicationOrderDosageInstruction[]|undefined}
        */
        Object.defineProperty(this, 'dosageInstruction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dosageInstruction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let MedicationOrderDosageInstruction = require('../backbone_elements/medicationOrderDosageInstruction.js');
                this.__data.dosageInstruction = Array.isArray(valueProvided) ? valueProvided.map(v => new MedicationOrderDosageInstruction(v)) : [new MedicationOrderDosageInstruction(valueProvided)];
            }
        });

        /**
         * @description Indicates the specific details for the dispense or medication supply part of a
    medication order (also known as a Medication Prescription).  Note that this
    information is NOT always sent with the order.  There may be in some settings
    (e.g. hospitals) institutional or system support for completing the dispense
    details in the pharmacy department.
         * @property {MedicationOrderDispenseRequest|undefined}
        */
        Object.defineProperty(this, 'dispenseRequest', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.dispenseRequest,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let MedicationOrderDispenseRequest = require('../backbone_elements/medicationOrderDispenseRequest.js');
                this.__data.dispenseRequest = new MedicationOrderDispenseRequest(valueProvided);
            }
        });

        /**
         * @description Indicates whether or not substitution can or should be part of the dispense.
    In some cases substitution must happen, in other cases substitution must not
    happen, and in others it does not matter. This block explains the prescriber's
    intent. If nothing is specified substitution may be done.
         * @property {MedicationOrderSubstitution|undefined}
        */
        Object.defineProperty(this, 'substitution', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.substitution,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let MedicationOrderSubstitution = require('../backbone_elements/medicationOrderSubstitution.js');
                this.__data.substitution = new MedicationOrderSubstitution(valueProvided);
            }
        });

        /**
         * @description A link to a resource representing an earlier order or prescription that this
    order supersedes.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'priorPrescription', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.priorPrescription,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.priorPrescription = new Reference(valueProvided);
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            dateWritten,
            status,
            dateEnded,
            reasonEnded,
            patient,
            prescriber,
            encounter,
            reasonCodeableConcept,
            reasonReference,
            note,
            medicationCodeableConcept,
            medicationReference,
            dosageInstruction,
            dispenseRequest,
            substitution,
            priorPrescription,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'MedicationOrder',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'MedicationOrder';
    }

    /**
     * @description Creates a blank new resource
     * @returns {MedicationOrder}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {dateTime|undefined} [dateWritten],
     * @param {code|undefined} [status],
     * @param {dateTime|undefined} [dateEnded],
     * @param {CodeableConcept|undefined} [reasonEnded],
     * @param {Reference|undefined} [patient],
     * @param {Reference|undefined} [prescriber],
     * @param {Reference|undefined} [encounter],
     * @param {CodeableConcept|undefined} [reasonCodeableConcept],
     * @param {Reference|undefined} [reasonReference],
     * @param {String|undefined} [note],
     * @param {CodeableConcept|undefined} [medicationCodeableConcept],
     * @param {Reference|undefined} [medicationReference],
     * @param {MedicationOrderDosageInstruction[]|undefined} [dosageInstruction],
     * @param {MedicationOrderDispenseRequest|undefined} [dispenseRequest],
     * @param {MedicationOrderSubstitution|undefined} [substitution],
     * @param {Reference|undefined} [priorPrescription],
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            dateWritten,
            status,
            dateEnded,
            reasonEnded,
            patient,
            prescriber,
            encounter,
            reasonCodeableConcept,
            reasonReference,
            note,
            medicationCodeableConcept,
            medicationReference,
            dosageInstruction,
            dispenseRequest,
            substitution,
            priorPrescription,
        }
    ) {
        return new MedicationOrder({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            dateWritten,
            status,
            dateEnded,
            reasonEnded,
            patient,
            prescriber,
            encounter,
            reasonCodeableConcept,
            reasonReference,
            note,
            medicationCodeableConcept,
            medicationReference,
            dosageInstruction,
            dispenseRequest,
            substitution,
            priorPrescription,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {MedicationOrder}
    */
    copy() {
        return new MedicationOrder(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            dateWritten: this.dateWritten,
            status: this.status,
            dateEnded: this.dateEnded,
            reasonEnded: this.reasonEnded && this.reasonEnded.toJSON(),
            patient: this.patient && this.patient.toJSON(),
            prescriber: this.prescriber && this.prescriber.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            reasonCodeableConcept: this.reasonCodeableConcept && this.reasonCodeableConcept.toJSON(),
            reasonReference: this.reasonReference && this.reasonReference.toJSON(),
            note: this.note,
            medicationCodeableConcept: this.medicationCodeableConcept && this.medicationCodeableConcept.toJSON(),
            medicationReference: this.medicationReference && this.medicationReference.toJSON(),
            dosageInstruction: this.dosageInstruction && this.dosageInstruction.map(v => v.toJSON()),
            dispenseRequest: this.dispenseRequest && this.dispenseRequest.toJSON(),
            substitution: this.substitution && this.substitution.toJSON(),
            priorPrescription: this.priorPrescription && this.priorPrescription.toJSON(),
        });
    }
}

module.exports = MedicationOrder;
