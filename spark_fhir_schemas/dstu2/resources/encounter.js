/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
Encounter
    An interaction between a patient and healthcare provider(s) for the purpose of
    providing healthcare service(s) or assessing the health status of a patient.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Encounter extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {code} status,
     * @param {EncounterStatusHistory[]|undefined} [statusHistory],
     * @param {code|undefined} [class_],
     * @param {CodeableConcept[]|undefined} [type],
     * @param {CodeableConcept|undefined} [priority],
     * @param {Reference|undefined} [patient],
     * @param {Reference[]|undefined} [episodeOfCare],
     * @param {Reference[]|undefined} [incomingReferral],
     * @param {EncounterParticipant[]|undefined} [participant],
     * @param {Reference|undefined} [appointment],
     * @param {Period|undefined} [period],
     * @param {Duration|undefined} [length],
     * @param {CodeableConcept[]|undefined} [reason],
     * @param {Reference[]|undefined} [indication],
     * @param {EncounterHospitalization|undefined} [hospitalization],
     * @param {EncounterLocation[]|undefined} [location],
     * @param {Reference|undefined} [serviceProvider],
     * @param {Reference|undefined} [partOf],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            statusHistory,
            'class': class_,
            type,
            priority,
            patient,
            episodeOfCare,
            incomingReferral,
            participant,
            appointment,
            period,
            length,
            reason,
            indication,
            hospitalization,
            location,
            serviceProvider,
            partOf,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content may not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource, and may be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description Identifier(s) by which this encounter is known.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description planned | arrived | in-progress | onleave | finished | cancelled.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description The status history permits the encounter resource to contain the status
    history without needing to read through the historical versions of the
    resource, or even have the server store them.
         * @property {EncounterStatusHistory[]|undefined}
        */
        Object.defineProperty(this, 'statusHistory', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.statusHistory,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let EncounterStatusHistory = require('../backbone_elements/encounterStatusHistory.js');
                this.__data.statusHistory = Array.isArray(valueProvided) ? valueProvided.map(v => new EncounterStatusHistory(v)) : [new EncounterStatusHistory(valueProvided)];
            }
        });

        /**
         * @description inpatient | outpatient | ambulatory | emergency +.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'class', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.class,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.class = valueProvided;
            }
        });

        /**
         * @description Specific type of encounter (e.g. e-mail consultation, surgical day-care,
    skilled nursing, rehabilitation).
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'type', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.type,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.type = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Indicates the urgency of the encounter.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'priority', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.priority,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.priority = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The patient present at the encounter.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'patient', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.patient,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patient = new Reference(valueProvided);
            }
        });

        /**
         * @description Where a specific encounter should be classified as a part of a specific
    episode(s) of care this field should be used. This association can facilitate
    grouping of related encounters together for a specific purpose, such as
    government reporting, issue tracking, association via a common problem.  The
    association is recorded on the encounter as these are typically created after
    the episode of care, and grouped on entry rather than editing the episode of
    care to append another encounter to it (the episode of care could span years).
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'episodeOfCare', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.episodeOfCare,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.episodeOfCare = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description The referral request this encounter satisfies (incoming referral).
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'incomingReferral', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.incomingReferral,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.incomingReferral = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description The list of people responsible for providing the service.
         * @property {EncounterParticipant[]|undefined}
        */
        Object.defineProperty(this, 'participant', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.participant,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let EncounterParticipant = require('../backbone_elements/encounterParticipant.js');
                this.__data.participant = Array.isArray(valueProvided) ? valueProvided.map(v => new EncounterParticipant(v)) : [new EncounterParticipant(valueProvided)];
            }
        });

        /**
         * @description The appointment that scheduled this encounter.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'appointment', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.appointment,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.appointment = new Reference(valueProvided);
            }
        });

        /**
         * @description The start and end time of the encounter.
         * @property {Period|undefined}
        */
        Object.defineProperty(this, 'period', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.period,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Period = require('../complex_types/period.js');
                this.__data.period = new Period(valueProvided);
            }
        });

        /**
         * @description Quantity of time the encounter lasted. This excludes the time during leaves of
    absence.
         * @property {Duration|undefined}
        */
        Object.defineProperty(this, 'length', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.length,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.length = valueProvided;
            }
        });

        /**
         * @description Reason the encounter takes place, expressed as a code. For admissions, this
    can be used for a coded admission diagnosis.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'reason', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reason,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.reason = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Reason the encounter takes place, as specified using information from another
    resource. For admissions, this is the admission diagnosis. The indication will
    typically be a Condition (with other resources referenced in the
    evidence.detail), or a Procedure.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'indication', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.indication,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.indication = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Details about the admission to a healthcare service.
         * @property {EncounterHospitalization|undefined}
        */
        Object.defineProperty(this, 'hospitalization', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.hospitalization,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let EncounterHospitalization = require('../backbone_elements/encounterHospitalization.js');
                this.__data.hospitalization = new EncounterHospitalization(valueProvided);
            }
        });

        /**
         * @description List of locations where  the patient has been during this encounter.
         * @property {EncounterLocation[]|undefined}
        */
        Object.defineProperty(this, 'location', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.location,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let EncounterLocation = require('../backbone_elements/encounterLocation.js');
                this.__data.location = Array.isArray(valueProvided) ? valueProvided.map(v => new EncounterLocation(v)) : [new EncounterLocation(valueProvided)];
            }
        });

        /**
         * @description An organization that is in charge of maintaining the information of this
    Encounter (e.g. who maintains the report or the master service catalog item,
    etc.). This MAY be the same as the organization on the Patient record, however
    it could be different. This MAY not be not the Service Delivery Location's
    Organization.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'serviceProvider', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.serviceProvider,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.serviceProvider = new Reference(valueProvided);
            }
        });

        /**
         * @description Another Encounter of which this encounter is a part of (administratively or in
    time).
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'partOf', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.partOf,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.partOf = new Reference(valueProvided);
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            statusHistory,
            'class': class_,
            type,
            priority,
            patient,
            episodeOfCare,
            incomingReferral,
            participant,
            appointment,
            period,
            length,
            reason,
            indication,
            hospitalization,
            location,
            serviceProvider,
            partOf,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Encounter',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'Encounter';
    }

    /**
     * @description Creates a blank new resource
     * @returns {Encounter}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {code} status,
     * @param {EncounterStatusHistory[]|undefined} [statusHistory],
     * @param {code|undefined} [class_],
     * @param {CodeableConcept[]|undefined} [type],
     * @param {CodeableConcept|undefined} [priority],
     * @param {Reference|undefined} [patient],
     * @param {Reference[]|undefined} [episodeOfCare],
     * @param {Reference[]|undefined} [incomingReferral],
     * @param {EncounterParticipant[]|undefined} [participant],
     * @param {Reference|undefined} [appointment],
     * @param {Period|undefined} [period],
     * @param {Duration|undefined} [length],
     * @param {CodeableConcept[]|undefined} [reason],
     * @param {Reference[]|undefined} [indication],
     * @param {EncounterHospitalization|undefined} [hospitalization],
     * @param {EncounterLocation[]|undefined} [location],
     * @param {Reference|undefined} [serviceProvider],
     * @param {Reference|undefined} [partOf],
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            statusHistory,
            'class': class_,
            type,
            priority,
            patient,
            episodeOfCare,
            incomingReferral,
            participant,
            appointment,
            period,
            length,
            reason,
            indication,
            hospitalization,
            location,
            serviceProvider,
            partOf,
        }
    ) {
        return new Encounter({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            statusHistory,
            'class': class_,
            type,
            priority,
            patient,
            episodeOfCare,
            incomingReferral,
            participant,
            appointment,
            period,
            length,
            reason,
            indication,
            hospitalization,
            location,
            serviceProvider,
            partOf,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {Encounter}
    */
    copy() {
        return new Encounter(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            status: this.status,
            statusHistory: this.statusHistory && this.statusHistory.map(v => v.toJSON()),
            class: this.class,
            type: this.type && this.type.map(v => v.toJSON()),
            priority: this.priority && this.priority.toJSON(),
            patient: this.patient && this.patient.toJSON(),
            episodeOfCare: this.episodeOfCare && this.episodeOfCare.map(v => v.toJSON()),
            incomingReferral: this.incomingReferral && this.incomingReferral.map(v => v.toJSON()),
            participant: this.participant && this.participant.map(v => v.toJSON()),
            appointment: this.appointment && this.appointment.toJSON(),
            period: this.period && this.period.toJSON(),
            length: this.length,
            reason: this.reason && this.reason.map(v => v.toJSON()),
            indication: this.indication && this.indication.map(v => v.toJSON()),
            hospitalization: this.hospitalization && this.hospitalization.toJSON(),
            location: this.location && this.location.map(v => v.toJSON()),
            serviceProvider: this.serviceProvider && this.serviceProvider.toJSON(),
            partOf: this.partOf && this.partOf.toJSON(),
        });
    }
}

module.exports = Encounter;
