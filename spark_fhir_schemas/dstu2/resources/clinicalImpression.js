/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
ClinicalImpression
    A record of a clinical assessment performed to determine what problem(s) may
    affect the patient and before planning the treatments or management strategies
    that are best to manage a patient's condition. Assessments are often 1:1 with
    a clinical consultation / encounter,  but this varies greatly depending on the
    clinical workflow. This resource is called "ClinicalImpression" rather than
    "ClinicalAssessment" to avoid confusion with the recording of assessment tools
    such as Apgar score.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class ClinicalImpression extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Reference} patient,
     * @param {Reference|undefined} [assessor],
     * @param {code} status,
     * @param {dateTime|undefined} [date],
     * @param {String|undefined} [description],
     * @param {Reference|undefined} [previous],
     * @param {Reference[]|undefined} [problem],
     * @param {CodeableConcept|undefined} [triggerCodeableConcept],
     * @param {Reference|undefined} [triggerReference],
     * @param {ClinicalImpressionInvestigations[]|undefined} [investigations],
     * @param {uri|undefined} [protocol],
     * @param {String|undefined} [summary],
     * @param {ClinicalImpressionFinding[]|undefined} [finding],
     * @param {CodeableConcept[]|undefined} [resolved],
     * @param {ClinicalImpressionRuledOut[]|undefined} [ruledOut],
     * @param {String|undefined} [prognosis],
     * @param {Reference[]|undefined} [plan],
     * @param {Reference[]|undefined} [action],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            patient,
            assessor,
            status,
            date,
            description,
            previous,
            problem,
            triggerCodeableConcept,
            triggerReference,
            investigations,
            protocol,
            summary,
            finding,
            resolved,
            ruledOut,
            prognosis,
            plan,
            action,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content may not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource, and may be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description The patient being assessed.
         * @property {Reference}
        */
        Object.defineProperty(this, 'patient', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.patient,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patient = new Reference(valueProvided);
            }
        });

        /**
         * @description The clinician performing the assessment.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'assessor', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.assessor,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.assessor = new Reference(valueProvided);
            }
        });

        /**
         * @description Identifies the workflow status of the assessment.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description The point in time at which the assessment was concluded (not when it was
    recorded).
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.date,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.date = valueProvided;
            }
        });

        /**
         * @description A summary of the context and/or cause of the assessment - why / where was it
    peformed, and what patient events/sstatus prompted it.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'description', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.description,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.description = valueProvided;
            }
        });

        /**
         * @description A reference to the last assesment that was conducted bon this patient.
    Assessments are often/usually ongoing in nature; a care provider (practitioner
    or team) will make new assessments on an ongoing basis as new data arises or
    the patient's conditions changes.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'previous', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.previous,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.previous = new Reference(valueProvided);
            }
        });

        /**
         * @description This a list of the general problems/conditions for a patient.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'problem', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.problem,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.problem = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description None
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'triggerCodeableConcept', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.triggerCodeableConcept,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.triggerCodeableConcept = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description None
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'triggerReference', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.triggerReference,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.triggerReference = new Reference(valueProvided);
            }
        });

        /**
         * @description One or more sets of investigations (signs, symptions, etc.). The actual
    grouping of investigations vary greatly depending on the type and context of
    the assessment. These investigations may include data generated during the
    assessment process, or data previously generated and recorded that is
    pertinent to the outcomes.
         * @property {ClinicalImpressionInvestigations[]|undefined}
        */
        Object.defineProperty(this, 'investigations', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.investigations,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ClinicalImpressionInvestigations = require('../backbone_elements/clinicalImpressionInvestigations.js');
                this.__data.investigations = Array.isArray(valueProvided) ? valueProvided.map(v => new ClinicalImpressionInvestigations(v)) : [new ClinicalImpressionInvestigations(valueProvided)];
            }
        });

        /**
         * @description Reference to a specific published clinical protocol that was followed during
    this assessment, and/or that provides evidence in support of the diagnosis.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'protocol', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.protocol,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.protocol = valueProvided;
            }
        });

        /**
         * @description A text summary of the investigations and the diagnosis.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'summary', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.summary,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.summary = valueProvided;
            }
        });

        /**
         * @description Specific findings or diagnoses that was considered likely or relevant to
    ongoing treatment.
         * @property {ClinicalImpressionFinding[]|undefined}
        */
        Object.defineProperty(this, 'finding', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.finding,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ClinicalImpressionFinding = require('../backbone_elements/clinicalImpressionFinding.js');
                this.__data.finding = Array.isArray(valueProvided) ? valueProvided.map(v => new ClinicalImpressionFinding(v)) : [new ClinicalImpressionFinding(valueProvided)];
            }
        });

        /**
         * @description Diagnoses/conditions resolved since the last assessment.
         * @property {CodeableConcept[]|undefined}
        */
        Object.defineProperty(this, 'resolved', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.resolved,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.resolved = Array.isArray(valueProvided) ? valueProvided.map(v => new CodeableConcept(v)) : [new CodeableConcept(valueProvided)];
            }
        });

        /**
         * @description Diagnosis considered not possible.
         * @property {ClinicalImpressionRuledOut[]|undefined}
        */
        Object.defineProperty(this, 'ruledOut', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.ruledOut,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ClinicalImpressionRuledOut = require('../backbone_elements/clinicalImpressionRuledOut.js');
                this.__data.ruledOut = Array.isArray(valueProvided) ? valueProvided.map(v => new ClinicalImpressionRuledOut(v)) : [new ClinicalImpressionRuledOut(valueProvided)];
            }
        });

        /**
         * @description Estimate of likely outcome.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'prognosis', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.prognosis,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.prognosis = valueProvided;
            }
        });

        /**
         * @description Plan of action after assessment.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'plan', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.plan,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.plan = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        /**
         * @description Actions taken during assessment.
         * @property {Reference[]|undefined}
        */
        Object.defineProperty(this, 'action', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.action,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.action = Array.isArray(valueProvided) ? valueProvided.map(v => new Reference(v)) : [new Reference(valueProvided)];
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            patient,
            assessor,
            status,
            date,
            description,
            previous,
            problem,
            triggerCodeableConcept,
            triggerReference,
            investigations,
            protocol,
            summary,
            finding,
            resolved,
            ruledOut,
            prognosis,
            plan,
            action,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'ClinicalImpression',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'ClinicalImpression';
    }

    /**
     * @description Creates a blank new resource
     * @returns {ClinicalImpression}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Reference} patient,
     * @param {Reference|undefined} [assessor],
     * @param {code} status,
     * @param {dateTime|undefined} [date],
     * @param {String|undefined} [description],
     * @param {Reference|undefined} [previous],
     * @param {Reference[]|undefined} [problem],
     * @param {CodeableConcept|undefined} [triggerCodeableConcept],
     * @param {Reference|undefined} [triggerReference],
     * @param {ClinicalImpressionInvestigations[]|undefined} [investigations],
     * @param {uri|undefined} [protocol],
     * @param {String|undefined} [summary],
     * @param {ClinicalImpressionFinding[]|undefined} [finding],
     * @param {CodeableConcept[]|undefined} [resolved],
     * @param {ClinicalImpressionRuledOut[]|undefined} [ruledOut],
     * @param {String|undefined} [prognosis],
     * @param {Reference[]|undefined} [plan],
     * @param {Reference[]|undefined} [action],
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            patient,
            assessor,
            status,
            date,
            description,
            previous,
            problem,
            triggerCodeableConcept,
            triggerReference,
            investigations,
            protocol,
            summary,
            finding,
            resolved,
            ruledOut,
            prognosis,
            plan,
            action,
        }
    ) {
        return new ClinicalImpression({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            patient,
            assessor,
            status,
            date,
            description,
            previous,
            problem,
            triggerCodeableConcept,
            triggerReference,
            investigations,
            protocol,
            summary,
            finding,
            resolved,
            ruledOut,
            prognosis,
            plan,
            action,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {ClinicalImpression}
    */
    copy() {
        return new ClinicalImpression(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            patient: this.patient && this.patient.toJSON(),
            assessor: this.assessor && this.assessor.toJSON(),
            status: this.status,
            date: this.date,
            description: this.description,
            previous: this.previous && this.previous.toJSON(),
            problem: this.problem && this.problem.map(v => v.toJSON()),
            triggerCodeableConcept: this.triggerCodeableConcept && this.triggerCodeableConcept.toJSON(),
            triggerReference: this.triggerReference && this.triggerReference.toJSON(),
            investigations: this.investigations && this.investigations.map(v => v.toJSON()),
            protocol: this.protocol,
            summary: this.summary,
            finding: this.finding && this.finding.map(v => v.toJSON()),
            resolved: this.resolved && this.resolved.map(v => v.toJSON()),
            ruledOut: this.ruledOut && this.ruledOut.map(v => v.toJSON()),
            prognosis: this.prognosis,
            plan: this.plan && this.plan.map(v => v.toJSON()),
            action: this.action && this.action.map(v => v.toJSON()),
        });
    }
}

module.exports = ClinicalImpression;
