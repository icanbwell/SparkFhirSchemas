/* eslint-disable no-unused-vars */
// This file is auto-generated by generate_classes so do not edit manually

const Resource = require('../resources/resource');


/**
Immunization
    Describes the event of a patient being administered a vaccination or a record
    of a vaccination as reported by a patient, a clinician or another party and
    may include vaccine reaction information and what vaccination protocol was
    followed.
    If the element is present, it must have either a @value, an @id, or extensions
*/
class Immunization extends Resource {
    /**
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {code} status,
     * @param {dateTime|undefined} [date],
     * @param {CodeableConcept} vaccineCode,
     * @param {Reference} patient,
     * @param {Boolean} wasNotGiven,
     * @param {Boolean} reported,
     * @param {Reference|undefined} [performer],
     * @param {Reference|undefined} [requester],
     * @param {Reference|undefined} [encounter],
     * @param {Reference|undefined} [manufacturer],
     * @param {Reference|undefined} [location],
     * @param {String|undefined} [lotNumber],
     * @param {date|undefined} [expirationDate],
     * @param {CodeableConcept|undefined} [site],
     * @param {CodeableConcept|undefined} [route],
     * @param {SimpleQuantity|undefined} [doseQuantity],
     * @param {Annotation[]|undefined} [note],
     * @param {ImmunizationExplanation|undefined} [explanation],
     * @param {ImmunizationReaction[]|undefined} [reaction],
     * @param {ImmunizationVaccinationProtocol[]|undefined} [vaccinationProtocol],
    */
    constructor(
        {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            date,
            vaccineCode,
            patient,
            wasNotGiven,
            reported,
            performer,
            requester,
            encounter,
            manufacturer,
            location,
            lotNumber,
            expirationDate,
            site,
            route,
            doseQuantity,
            note,
            explanation,
            reaction,
            vaccinationProtocol,
        }
    ) {
        super({});

        // ---- Define getters and setters as enumerable ---

        /**
         * @description The logical id of the resource, as used in the URL for the resource. Once
    assigned, this value never changes.
         * @property {id|undefined}
        */
        Object.defineProperty(this, 'id', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.id,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.id = valueProvided;
            }
        });

        /**
         * @description The metadata about the resource. This is content that is maintained by the
    infrastructure. Changes to the content may not always be associated with
    version changes to the resource.
         * @property {Meta|undefined}
        */
        Object.defineProperty(this, 'meta', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.meta,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Meta = require('../complex_types/meta.js');
                this.__data.meta = new Meta(valueProvided);
            }
        });

        /**
         * @description A reference to a set of rules that were followed when the resource was
    constructed, and which must be understood when processing the content.
         * @property {uri|undefined}
        */
        Object.defineProperty(this, 'implicitRules', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.implicitRules,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.implicitRules = valueProvided;
            }
        });

        /**
         * @description The base language in which the resource is written.
         * @property {code|undefined}
        */
        Object.defineProperty(this, 'language', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.language,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.language = valueProvided;
            }
        });

        /**
         * @description A human-readable narrative that contains a summary of the resource, and may be
    used to represent the content of the resource to a human. The narrative need
    not encode all the structured data, but is required to contain sufficient
    detail to make it "clinically safe" for a human to just read the narrative.
    Resource definitions may define what content should be represented in the
    narrative to ensure clinical safety.
         * @property {Narrative|undefined}
        */
        Object.defineProperty(this, 'text', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.text,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Narrative = require('../complex_types/narrative.js');
                this.__data.text = new Narrative(valueProvided);
            }
        });

        /**
         * @description These resources do not have an independent existence apart from the resource
    that contains them - they cannot be identified independently, and nor can they
    have their own independent transaction scope.
         * @property {ResourceContainer[]|undefined}
        */
        Object.defineProperty(this, 'contained', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.contained,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ResourceContainer = require('../simple_types/resourceContainer.js');
                const {getResource} = require('../../../../operations/common/getResource');
                if (Array.isArray(valueProvided)) {
                    this.__data.contained = valueProvided.map(v => {
                        const ResourceCreator = getResource('4_0_0', v.resourceType);
                        return new ResourceCreator(v);
                    })
                } else {
                const ResourceCreator = getResource('4_0_0', valueProvided.resourceType);
                this.__data.contained = [new ResourceCreator(valueProvided)];
                }
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource. In order to make the use of extensions safe and
    manageable, there is a strict set of governance  applied to the definition and
    use of extensions. Though any implementer is allowed to define an extension,
    there is a set of requirements that SHALL be met as part of the definition of
    the extension.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'extension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.extension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.extension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description May be used to represent additional information that is not part of the basic
    definition of the resource, and that modifies the understanding of the element
    that contains it. Usually modifier elements provide negation or qualification.
    In order to make the use of extensions safe and manageable, there is a strict
    set of governance applied to the definition and use of extensions. Though any
    implementer is allowed to define an extension, there is a set of requirements
    that SHALL be met as part of the definition of the extension. Applications
    processing a resource are required to check for modifier extensions.
         * @property {Extension[]|undefined}
        */
        Object.defineProperty(this, 'modifierExtension', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.modifierExtension,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Extension = require('../extensions/extension.js');
                this.__data.modifierExtension = Array.isArray(valueProvided) ? valueProvided.map(v => new Extension(v)) : [new Extension(valueProvided)];
            }
        });

        /**
         * @description A unique identifier assigned to this immunization record.
         * @property {Identifier[]|undefined}
        */
        Object.defineProperty(this, 'identifier', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.identifier,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Identifier = require('../complex_types/identifier.js');
                this.__data.identifier = Array.isArray(valueProvided) ? valueProvided.map(v => new Identifier(v)) : [new Identifier(valueProvided)];
            }
        });

        /**
         * @description Indicates the current status of the vaccination event.
         * @property {code}
        */
        Object.defineProperty(this, 'status', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.status,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.status = valueProvided;
            }
        });

        /**
         * @description Date vaccine administered or was to be administered.
         * @property {dateTime|undefined}
        */
        Object.defineProperty(this, 'date', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.date,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.date = valueProvided;
            }
        });

        /**
         * @description Vaccine that was administered or was to be administered.
         * @property {CodeableConcept}
        */
        Object.defineProperty(this, 'vaccineCode', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.vaccineCode,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.vaccineCode = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The patient who either received or did not receive the immunization.
         * @property {Reference}
        */
        Object.defineProperty(this, 'patient', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.patient,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.patient = new Reference(valueProvided);
            }
        });

        /**
         * @description Indicates if the vaccination was or was not given.
         * @property {Boolean}
        */
        Object.defineProperty(this, 'wasNotGiven', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.wasNotGiven,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.wasNotGiven = valueProvided;
            }
        });

        /**
         * @description True if this administration was reported rather than directly administered.
         * @property {Boolean}
        */
        Object.defineProperty(this, 'reported', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reported,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.reported = valueProvided;
            }
        });

        /**
         * @description Clinician who administered the vaccine.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'performer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.performer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.performer = new Reference(valueProvided);
            }
        });

        /**
         * @description Clinician who ordered the vaccination.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'requester', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.requester,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.requester = new Reference(valueProvided);
            }
        });

        /**
         * @description The visit or admission or other contact between patient and health care
    provider the immunization was performed as part of.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'encounter', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.encounter,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.encounter = new Reference(valueProvided);
            }
        });

        /**
         * @description Name of vaccine manufacturer.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'manufacturer', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.manufacturer,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.manufacturer = new Reference(valueProvided);
            }
        });

        /**
         * @description The service delivery location where the vaccine administration occurred.
         * @property {Reference|undefined}
        */
        Object.defineProperty(this, 'location', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.location,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Reference = require('../complex_types/reference.js');
                this.__data.location = new Reference(valueProvided);
            }
        });

        /**
         * @description Lot number of the  vaccine product.
         * @property {String|undefined}
        */
        Object.defineProperty(this, 'lotNumber', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.lotNumber,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.lotNumber = valueProvided;
            }
        });

        /**
         * @description Date vaccine batch expires.
         * @property {date|undefined}
        */
        Object.defineProperty(this, 'expirationDate', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.expirationDate,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.expirationDate = valueProvided;
            }
        });

        /**
         * @description Body site where vaccine was administered.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'site', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.site,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.site = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The path by which the vaccine product is taken into the body.
         * @property {CodeableConcept|undefined}
        */
        Object.defineProperty(this, 'route', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.route,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let CodeableConcept = require('../complex_types/codeableConcept.js');
                this.__data.route = new CodeableConcept(valueProvided);
            }
        });

        /**
         * @description The quantity of vaccine product that was administered.
         * @property {SimpleQuantity|undefined}
        */
        Object.defineProperty(this, 'doseQuantity', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.doseQuantity,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                this.__data.doseQuantity = valueProvided;
            }
        });

        /**
         * @description Extra information about the immunization that is not conveyed by the other
    attributes.
         * @property {Annotation[]|undefined}
        */
        Object.defineProperty(this, 'note', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.note,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let Annotation = require('../complex_types/annotation.js');
                this.__data.note = Array.isArray(valueProvided) ? valueProvided.map(v => new Annotation(v)) : [new Annotation(valueProvided)];
            }
        });

        /**
         * @description Reasons why a vaccine was or was not administered.
         * @property {ImmunizationExplanation|undefined}
        */
        Object.defineProperty(this, 'explanation', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.explanation,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ImmunizationExplanation = require('../backbone_elements/immunizationExplanation.js');
                this.__data.explanation = new ImmunizationExplanation(valueProvided);
            }
        });

        /**
         * @description Categorical data indicating that an adverse event is associated in time to an
    immunization.
         * @property {ImmunizationReaction[]|undefined}
        */
        Object.defineProperty(this, 'reaction', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.reaction,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ImmunizationReaction = require('../backbone_elements/immunizationReaction.js');
                this.__data.reaction = Array.isArray(valueProvided) ? valueProvided.map(v => new ImmunizationReaction(v)) : [new ImmunizationReaction(valueProvided)];
            }
        });

        /**
         * @description Contains information about the protocol(s) under which the vaccine was
    administered.
         * @property {ImmunizationVaccinationProtocol[]|undefined}
        */
        Object.defineProperty(this, 'vaccinationProtocol', {
            // https://www.w3schools.com/js/js_object_es5.asp
            enumerable: true,
            configurable: true,
            get: () => this.__data.vaccinationProtocol,
            set: valueProvided => {
                if (valueProvided === undefined || valueProvided === null || (Array.isArray(valueProvided) && valueProvided.length === 0)) {
                    return;
                }
                let ImmunizationVaccinationProtocol = require('../backbone_elements/immunizationVaccinationProtocol.js');
                this.__data.vaccinationProtocol = Array.isArray(valueProvided) ? valueProvided.map(v => new ImmunizationVaccinationProtocol(v)) : [new ImmunizationVaccinationProtocol(valueProvided)];
            }
        });

        // --- Now copy properties from passed in object ----
        Object.assign(this, {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            date,
            vaccineCode,
            patient,
            wasNotGiven,
            reported,
            performer,
            requester,
            encounter,
            manufacturer,
            location,
            lotNumber,
            expirationDate,
            site,
            route,
            doseQuantity,
            note,
            explanation,
            reaction,
            vaccinationProtocol,
        });

        // Define a default non-writable resourceType property

        Object.defineProperty(this, 'resourceType', {
            value: 'Immunization',
            enumerable: true,
            writable: false,
            configurable: true
        });
    }

    static get resourceType() {
        return 'Immunization';
    }

    /**
     * @description Creates a blank new resource
     * @returns {Immunization}
     * @param {id|undefined} [id],
     * @param {Meta|undefined} [meta],
     * @param {uri|undefined} [implicitRules],
     * @param {code|undefined} [language],
     * @param {Narrative|undefined} [text],
     * @param {ResourceContainer[]|undefined} [contained],
     * @param {Extension[]|undefined} [extension],
     * @param {Extension[]|undefined} [modifierExtension],
     * @param {Identifier[]|undefined} [identifier],
     * @param {code} status,
     * @param {dateTime|undefined} [date],
     * @param {CodeableConcept} vaccineCode,
     * @param {Reference} patient,
     * @param {Boolean} wasNotGiven,
     * @param {Boolean} reported,
     * @param {Reference|undefined} [performer],
     * @param {Reference|undefined} [requester],
     * @param {Reference|undefined} [encounter],
     * @param {Reference|undefined} [manufacturer],
     * @param {Reference|undefined} [location],
     * @param {String|undefined} [lotNumber],
     * @param {date|undefined} [expirationDate],
     * @param {CodeableConcept|undefined} [site],
     * @param {CodeableConcept|undefined} [route],
     * @param {SimpleQuantity|undefined} [doseQuantity],
     * @param {Annotation[]|undefined} [note],
     * @param {ImmunizationExplanation|undefined} [explanation],
     * @param {ImmunizationReaction[]|undefined} [reaction],
     * @param {ImmunizationVaccinationProtocol[]|undefined} [vaccinationProtocol],
    */
    create(
            {
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            date,
            vaccineCode,
            patient,
            wasNotGiven,
            reported,
            performer,
            requester,
            encounter,
            manufacturer,
            location,
            lotNumber,
            expirationDate,
            site,
            route,
            doseQuantity,
            note,
            explanation,
            reaction,
            vaccinationProtocol,
        }
    ) {
        return new Immunization({
            id,
            meta,
            implicitRules,
            language,
            text,
            contained,
            extension,
            modifierExtension,
            identifier,
            status,
            date,
            vaccineCode,
            patient,
            wasNotGiven,
            reported,
            performer,
            requester,
            encounter,
            manufacturer,
            location,
            lotNumber,
            expirationDate,
            site,
            route,
            doseQuantity,
            note,
            explanation,
            reaction,
            vaccinationProtocol,
        });
    }

    /**
     * @description creates a copy of this resource
     * @returns {Immunization}
    */
    copy() {
        return new Immunization(this.toJSON());
    }


    /**
     * Returns JSON representation of entity
     * @return {Object}
     */
    toJSON() {
        const {removeNull} = require('../../../../utils/nullRemover');

        return removeNull({
            resourceType: this.resourceType,
            id: this.id,
            meta: this.meta && this.meta.toJSON(),
            implicitRules: this.implicitRules,
            language: this.language,
            text: this.text && this.text.toJSON(),
            contained: this.contained && this.contained.map(v => v.toJSON()),
            extension: this.extension && this.extension.map(v => v.toJSON()),
            modifierExtension: this.modifierExtension && this.modifierExtension.map(v => v.toJSON()),
            identifier: this.identifier && this.identifier.map(v => v.toJSON()),
            status: this.status,
            date: this.date,
            vaccineCode: this.vaccineCode && this.vaccineCode.toJSON(),
            patient: this.patient && this.patient.toJSON(),
            wasNotGiven: this.wasNotGiven,
            reported: this.reported,
            performer: this.performer && this.performer.toJSON(),
            requester: this.requester && this.requester.toJSON(),
            encounter: this.encounter && this.encounter.toJSON(),
            manufacturer: this.manufacturer && this.manufacturer.toJSON(),
            location: this.location && this.location.toJSON(),
            lotNumber: this.lotNumber,
            expirationDate: this.expirationDate,
            site: this.site && this.site.toJSON(),
            route: this.route && this.route.toJSON(),
            doseQuantity: this.doseQuantity,
            note: this.note && this.note.map(v => v.toJSON()),
            explanation: this.explanation && this.explanation.toJSON(),
            reaction: this.reaction && this.reaction.map(v => v.toJSON()),
            vaccinationProtocol: this.vaccinationProtocol && this.vaccinationProtocol.map(v => v.toJSON()),
        });
    }
}

module.exports = Immunization;
